<script type="text/javascript">

PublicationsApp = new Backbone.Marionette.Application();

PublicationsApp.PrintManagement = (function(Backbone){
    
    var people = <%= [].concat(PeopleService.findAssignedParticipants.collect {|p| {'id' => p.id, 'text' => p.getFullPublicationName}}).to_json.html_safe %>;
    var rooms = <%= [].concat(RoomsService.findPublishedRooms.collect {|r| {'id' => r.id, 'text' => r.name}}).to_json.html_safe %>
    var items = <%= [].concat(PublishedProgramItemsService.getPublishedProgramItemsThatHavePeople.collect {|r| {'id' => r.id, 'text' => r.title}}).to_json.html_safe %>

    var GenericForm = Backbone.Form.extend({
        schema : {
            page_size : { type : 'Select', title : '<%= t "page-size" %>', 
                          options : <%= [[' ',' ']].concat(Prawn::Document::PageGeometry::SIZES.collect {|k,v| {'val' => k, 'label' => k} }).to_json.html_safe %> 
                },
            orientation : { type : 'Select', title : '<%= t "print-orientation" %>', 
                          options : { landscape : 'Landscape' , portrait : 'Portrait'} 
                },
        },
    
        data : {
            page_size : 'LETTER',
            orientation : 'portrait'
        }    
    });
    
    var TableTentForm = Backbone.Form.extend({
        schema : {
            page_size : { type : 'Select', title : '<%= t "page-size" %>', 
                          options : <%= [[' ',' ']].concat(Prawn::Document::PageGeometry::SIZES.collect {|k,v| {'val' => k, 'label' => k} }).to_json.html_safe %>,
                          help : '<%= t "The page size for the PDF output" %>' 
                },
            people : { type : 'Select2', title : '<%= t "publications-people" %>', 
                        config : {
                            multiple: true,
                            maximumSelectionSize : -1,
                            query: function (query) {
                                var data = {
                                    results: _.filter(people, function(x) { return x.text.toLowerCase().indexOf(query.term.toLowerCase()) != -1; })
                                };
                                query.callback(data);
                            }
                        },
                        validators : [
                            function checkPeople(value, formValues) {
                                    var err = {
                                        type : 'people',
                                        message : '<%= t "Only select items OR people not both" %>'
                                    };
                                    
                                    if ((value.length > 0) && (formValues.items.length > 0)) return err;
                                }
                        ]
                },
            items : { type : 'Select2', title : '<%= t "publications-items" %>',
                        config : {
                            multiple: true,
                            maximumSelectionSize : -1,
                            query: function (query) {
                                var data = {
                                    results: _.filter(items, function(x) { return x.text.toLowerCase().indexOf(query.term.toLowerCase()) != -1; })
                                };
                                query.callback(data);
                            }
                        },
                        validators : [
                            function checkItems(value, formValues) {
                                    var err = {
                                        type : 'items',
                                        message : '<%= t "Only select items OR people not both" %>'
                                    };
                                    
                                    if ((value.length > 0) && (formValues.people.length > 0)) return err;
                                }
                        ]
                }
        },
        
        data : {
            page_size : 'LETTER'
        }
    });
    
    var BadgeForm = Backbone.Form.extend({
        schema : {
            additional_roles : { type : 'Checkbox', title : '<%= t "publications-include-invisible" %>'},
            label_type : { type : 'Select', title : '<%= t "label-type" %>', 
                            options : <%= [].concat(LabelDimensions.find(:all).collect {|s| {'val' => s.id, 'label' => (s.manufacturer + ' - ' + s.name)} }).to_json.html_safe %> },
            people : { type : 'Select2', title : '<%= t "publications-people" %>', 
                        config : {
                            multiple: true,
                            maximumSelectionSize : -1,
                            query: function (query) {
                                var data = {
                                    results: _.filter(people, function(x) { return x.text.toLowerCase().indexOf(query.term.toLowerCase()) != -1; })
                                };
                                query.callback(data);
                            }
                        }
                }
        },
        
        data : {
        }
    });
    
    var RoomsForm = Backbone.Form.extend({
        schema : {
            day : { type : 'Select', title : '<%= t "Day" %>', 
                         options : <%=  [{'label' => 'All', 'val' =>"-1"}].concat((((0..((SITE_CONFIG[:conference][:number_of_days]).to_i-1)).to_a.collect{ |r| [(Time.zone.parse(SITE_CONFIG[:conference][:start_date].to_s) + r.days).strftime('%A'), r]})).collect {|i,l| {'val' => l, 'label' => i}}).to_json.html_safe%> },
            page_size : { type : 'Select', title : '<%= t "page-size" %>', 
                          options : <%= [[' ',' ']].concat(Prawn::Document::PageGeometry::SIZES.collect {|k,v| {'val' => k, 'label' => k} }).to_json.html_safe %> 
                },
            orientation : { type : 'Select', title : '<%= t "print-orientation" %>', 
                          options : { landscape : 'Landscape' , portrait : 'Portrait'} 
                },
            rooms : { type : 'Select2', title : '<%= t "publications-rooms" %>', 
                        config : {
                            multiple: true,
                            maximumSelectionSize : -1,
                            query: function (query) {
                                var data = {
                                    results: _.filter(rooms, function(x) { return x.text.toLowerCase().indexOf(query.term.toLowerCase()) != -1; })
                                };
                                query.callback(data);
                            }
                        }
                }
        },
        
        data : {
            page_size : 'LETTER',
            orientation : 'portrait'
        }    
    });
    
    var Workspace = Backbone.Router.extend({
        routes : {
            'report/:query' : 'report',
            'table_tents'   : 'table_tents',
            'badge_labels'  : 'badge_labels',
            'publications_room_signs' : 'publications_room_signs'
        },
        
        report : function(query) {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.PublicationView({
                form        : GenericForm,
                endPoint    : '/planner_reports/' + query
            }));
        },
        
        table_tents : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.PublicationView({
                form            : TableTentForm,
                endPoint        : '/planner_reports/table_tents',
                formTemplate    : '#table-tent-form-template'
            }));
        },
        
        badge_labels : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.PublicationView({
                form        : BadgeForm,
                endPoint    : '/planner_reports/badge_labels'
            }));
        },
        
        publications_room_signs : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.PublicationView({
                form        : RoomsForm,
                endPoint    : '/planner_reports/room_signs'
            }));
        }
    });
    
    /*
     * 
     */
    return {
        init : function(options) {
            new Workspace();
            Backbone.history.start();
        }
    }
    
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    PublicationsApp.addInitializer(PublicationsApp.PrintManagement.init);
    PublicationsApp.start({});
});

</script>
