<script type="text/javascript">

ConfigApp = new Backbone.Marionette.Application();

ConfigApp.ConfigManagement = (function(Backbone){
    
    TitleMdl =  Backbone.Model.extend({});
    
    SiteConfig = Backbone.Model.extend({
        schema : {
            name                : { type : 'Text', title : '<%= t "conference-name" %>' },
            time_zone : { type : 'Select', title : '<%= t "conference-time-zone" %>', options : <%= [].concat(ActiveSupport::TimeZone::MAPPING.values.collect {|s| {'val' => s, 'label' => s} }).to_json.html_safe %> },
            start_date          : { type : 'Datetime', title : '<%= t "conference-start-date" %>',
                                    tz_offset : <%= Time.zone.parse(SITE_CONFIG[:conference][:start_date].to_s).utc_offset/(60*60) %>,
                                    picker : {
                                        pickTime: false,
                                    } },
            number_of_days      : { type : 'Number', title : '<%= t "number-of-days" %>' },
            captcha_pub_key     : { type : 'Text', title : '<%= t "captcha-public-key" %>' },
            captcha_priv_key    : { type : 'Text', title : '<%= t "captcha-private-key" %>' },
        },
        
        data : {
            start_date  : new Date()
        },
        
        urlRoot : '/site_configs'
    });
    
    EmailConfig = Backbone.Model.extend({
        schema : {
            conference_name     : { type : 'Text', title : '<%= t "conference-name" %>' },
            domain              : { type : 'Text', title : '<%= t "config-domain" %>' },
            info                : { type : 'Text', title : '<%= t "config-info-email" %>' },
            from                : { type : 'Text', title : '<%= t "config-from-email" %>' },
            cc                  : { type : 'Text', title : '<%= t "config-cc-email" %>' },
            test_email          : { type : 'Text', title : '<%= t "config-test-email" %>' }
        },
        urlRoot : '/mail_configs'
    });

    CloudinaryConfig = Backbone.Model.extend({
        schema : {
            api_key                 : { type : 'Text', title : '<%= t "config-cloudinary-api-key" %>' },
            api_secret              : { type : 'Text', title : '<%= t "config-cloudinary-api-secret" %>' },
            cloud_name              : { type : 'Text', title : '<%= t "config-cloudinary-cloud-name" %>' },
            enhance_image_tag       : { type : 'Checkbox', title : '<%= t "config-cloudinary-enhance-image-tag" %>' },
            static_image_support    : { type : 'Checkbox', title : '<%= t "config-cloudinary-static-image-support" %>' }
        },
        urlRoot : '/cloudinary_config'
    });

    Equipment = Backbone.Model.extend({
        schema : {
            description     : { type : 'Text', title : '<%= t "equipment-name" %>' }
        },
        urlRoot : '/equipment_types'
    });
    
    EquipmentCollection = Backbone.Collection.extend({
        model : Equipment
    });
    
    ItemFormat = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "format-name" %>' },
            position : { type : 'Number', title : '<%= t "format-position" %>' }
        },
        urlRoot : '/formats'
    });
    
    ItemFormatCollection = Backbone.Collection.extend({
        model : ItemFormat
    });
    
    InviteCategory = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "invite-category-name" %>' },
            position : { type : 'Number', title : '<%= t "invite-category-position" %>' }
        },
        urlRoot : '/invitation_categories'
    });
    
    InviteCategoryCollection = Backbone.Collection.extend({
        model : InviteCategory
    });

    RoomSetup = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "room-setup-name" %>' },
        },
        urlRoot : '/setup_types'
    });
    
    RoomSetupCollection = Backbone.Collection.extend({
        model : RoomSetup
    });
    
    DataSource = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "data-source-name" %>' },
            primary  : { type : 'Checkbox', title : '<%= t "primary" %>' },
        },
        urlRoot : '/datasources'
    });
    
    DataSourceCollection = Backbone.Collection.extend({
        model : DataSource
    });
    
    TagContext = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "data-source-name" %>' }
        },
        urlRoot : '/tag_contexts'
    });
    
    TagContextCollection = Backbone.Collection.extend({
        model : TagContext
    });
    
    ConfigLayout = Backbone.Marionette.Layout.extend({
        template: "#config-list-layout-template",
        
        regions : {
            titleRegion     : "#config-title-div",
            controlRegion   : "#config-control-div",
            configRegion    : "#config-region-div",
        },
    });
    
    TitleView = Backbone.Marionette.ItemView.extend({
        template: '#config-title-template'
    });
    
    SiteConfigView = Marionette.ItemView.extend({
        template : '#site-config-view-template',
        
        // initialize : function() {
        // },
    });
    
    var configRegion = new Backbone.Marionette.Region({
        el: "#config-area"
    });


    var tabLists = [];
    
    function clearDetails() {
        _.invoke(tabLists, 'reset' );
    };

    var Workspace = Backbone.Router.extend({
        routes : {
            'equipment_config' : 'equipment_config',
            'item_format_config' : 'item_format_config',
            'invitation_category_config' : 'invitation_category_config',
            'room_setups_config' : 'room_setups_config',
            'data_sources_config' : 'data_sources_config',
            'tag_context_config' : 'tag_context_config',
            'conference_config' : 'conference_config',
            'email_config' : 'email_config',
            'cloudinary_config' : 'cloudinary_config'
        },
        
        equipment_config : function() {
            configRegion.close();
            
            equipmentLayout = new ConfigLayout();
            configRegion.show(equipmentLayout);
            equipmentLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "equipment" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#equipment-control-template",
                modelType               : Equipment,
                view_refresh_event      : "equipment:refresh",
                modal_create_title      : '<%= t "equipment-create-equipment" %>',
                region                  : equipmentLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "/equipment_types.json",
                collectionType          : EquipmentCollection,
                region                  : equipmentLayout.configRegion,
                template                : "#equipment-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "equipment:refresh",
                modal_edit_title        : '<%= t "equipment-edit-equipment" %>',
                modal_edit              : true
            }) );
        },
        
        item_format_config : function() {
            configRegion.close();
            
            itemFormatLayout = new ConfigLayout();
            configRegion.show(itemFormatLayout);
            itemFormatLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "config-item-formats" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#item-format-control-template",
                modelType               : ItemFormat,
                view_refresh_event      : "item_format:refresh",
                modal_create_title      : '<%= t "create-item-format" %>',
                region                  : itemFormatLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "/formats.json",
                collectionType          : ItemFormatCollection,
                region                  : itemFormatLayout.configRegion,
                template                : "#item-format-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "item_format:refresh",
                modal_edit_title        : '<%= t "edit-item-format" %>',
                modal_edit              : true
            }) );
        },
        
        invitation_category_config : function() {
            configRegion.close();
            
            inviteLayout = new ConfigLayout();
            configRegion.show(inviteLayout);
            inviteLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "config-invitation-categories" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#invite-category-control-template",
                modelType               : InviteCategory,
                view_refresh_event      : "invite_category:refresh",
                modal_create_title      : '<%= t "create-invitation-category" %>',
                region                  : inviteLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "/invitation_categories.json",
                collectionType          : InviteCategoryCollection,
                region                  : inviteLayout.configRegion,
                template                : "#item-format-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "invite_category:refresh",
                modal_edit_title        : '<%= t "edit-invitation-category" %>',
                modal_edit              : true
            }) );
        },
        
        room_setups_config : function() {
            configRegion.close();
            
            setupLayout = new ConfigLayout();
            configRegion.show(setupLayout);
            setupLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "config-room-setups" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#room-setup-control-template",
                modelType               : RoomSetup,
                view_refresh_event      : "room_setup:refresh",
                modal_create_title      : '<%= t "create-room-setup" %>',
                region                  : setupLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "/setup_types.json",
                collectionType          : RoomSetupCollection,
                region                  : setupLayout.configRegion,
                template                : "#room-setup-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "room_setup:refresh",
                modal_edit_title        : '<%= t "edit-room-setup" %>',
                modal_edit              : true
            }) );
        },
        
        data_sources_config : function() {
            configRegion.close();
            
            dataSourceLayout = new ConfigLayout();
            configRegion.show(dataSourceLayout);
            dataSourceLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "data-sources" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#data-source-control-template",
                modelType               : DataSource,
                view_refresh_event      : "data_source:refresh",
                modal_create_title      : '<%= t "create-data-source" %>',
                region                  : dataSourceLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "/datasources.json",
                collectionType          : DataSourceCollection,
                region                  : dataSourceLayout.configRegion,
                template                : "#data-source-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "data_source:refresh",
                modal_edit_title        : '<%= t "edit-data-source" %>',
                modal_edit              : true
            }) );
        },
        
        tag_context_config : function() {
            configRegion.close();
            
            tagContextLayout = new ConfigLayout();
            configRegion.show(tagContextLayout);
            tagContextLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "config-tag-contexts" %>' }) }) );
            
            TabUtils.createTabControl({
                template                : "#tag-context-control-template",
                modelType               : TagContext,
                view_refresh_event      : "tag_context:refresh",
                modal_create_title      : '<%= t "create-tag-context" %>',
                region                  : tagContextLayout.controlRegion,
            });
            
            tabLists.push( AppUtils.createCollectionView({
                url                     : "/tag_contexts.json",
                collectionType          : TagContextCollection,
                region                  : tagContextLayout.configRegion,
                template                : "#tag-context-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "tag_context:refresh",
                modal_edit_title        : '<%= t "edit-tag-context" %>',
                modal_edit              : true
            }) );
        },
        
        conference_config : function() {
            configRegion.close();
            
            configLayout = new ConfigLayout();
            configRegion.show(configLayout);
            
            var config = new SiteConfig();
            config.fetch({
                error : function(model, response) {
                    alertMessage("Error communicating with backend");
                },
                success : function(mdl) {
                    
                    var view = AppUtils.createEditItemView({
                        model           : mdl,
                        itemArea        : "#config-control-div",
                        readTemplate    : '#site-config-view-template',
                    });
                }
            });
        },
        
        email_config : function() {
            configRegion.close(); 
            configLayout = new ConfigLayout();
            configRegion.show(configLayout);
            
            var config = new EmailConfig();
            config.fetch({
                error : function(model, response) {
                    alertMessage("Error communicating with backend");
                },
                success : function(mdl) {
                    
                    var view = AppUtils.createEditItemView({
                        model           : mdl,
                        itemArea        : "#config-control-div",
                        readTemplate    : '#email-config-view-template',
                    });
                }
            });
        },
        
        cloudinary_config : function() {
            configRegion.close();
            configLayout = new ConfigLayout();
            configRegion.show(configLayout);
            
            var config = new CloudinaryConfig();
            config.fetch({
                error : function(model, response) {
                    alertMessage("Error communicating with backend");
                },
                success : function(mdl) {
                    var view = AppUtils.createEditItemView({
                        model           : mdl,
                        itemArea        : "#config-control-div",
                        readTemplate    : '#cloudinary-config-view-template'
                    });
                }
            });

        }
    });

    /*
     * 
     */
    return {
        init : function(options) {
            new Workspace();
            Backbone.history.start();
        }
    }
    
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    ConfigApp.addInitializer(ConfigApp.ConfigManagement.init);
    ConfigApp.start({});
});

</script>
