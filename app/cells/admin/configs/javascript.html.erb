<script type="text/javascript">

ConfigApp = new Backbone.Marionette.Application();

ConfigApp.ConfigManagement = (function(Backbone){

    var tzOffset = <%= Time.zone.parse(@start_date.start_date.to_s).utc_offset/60 %>;

    TitleMdl =  Backbone.Model.extend({});

    InviteCategory = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "invite-category-name" %>' },
            position : { type : 'Number', title : '<%= t "invite-category-position" %>' }
        },
        urlRoot : "<%= baseUri + '/invitation_categories' %>"
    });

    InviteCategoryCollection = Backbone.Collection.extend({
        model : InviteCategory
    });

    SiteConfig = Backbone.Model.extend({
        schema : {
            name                : { type : 'Text', title : '<%= t "conference-name" %>' },
            time_zone           : { type : 'Select', title : '<%= t "conference-time-zone" %>',
                                    options : <%= time_zone_options_for_select().to_json.html_safe %> },
            start_date          : { type : 'Datetime', title : '<%= t "conference-start-date" %>',
                                    tz_offset : function() { return tzOffset; },
                                    picker : {
                                        locale : "<%= I18n.locale %>",
                                        format : 'dddd, MMMM Do YYYY'
                                    } },
            number_of_days      : { type : 'Number', title : '<%= t "number-of-days" %>' },
            public_start_date   : { type : 'Datetime', title : '<%= t "conference-public-start-date" %>',
                                    tz_offset : function() { return tzOffset; },
                                    picker : {
                                        locale : "<%= I18n.locale %>",
                                        format : 'dddd, MMMM Do YYYY'
                                    },
                                    // to be >= start_date but <= start_date + numver of days
                                   },
            public_number_of_days : { type : 'Number', title : '<%= t "public-number-of-days" %>'
                                    // to be <= number_of_days
                                    },
            print_time_format   : { type : 'Select', title : '<%= t "time-format-for-publications" %>',
                                    options : [{val: '24', label: '24 hour'},{val: '12', label: '12 hour'}]
                                  }
            // languages           : { type : 'Text', title : '<%= t "supported-languages" %>'},
        },

        data : {
            start_date  : new Date()
        },

        urlRoot : "<%= baseUri + '/site_configs' %>"
    });

    TagContext = Backbone.Model.extend({
        schema : {
            name     : { type : 'Text', title : '<%= t "tag-context-name" %>' },
            publish  : { type : 'Checkbox', title : '<%= t "tags-publish" %>' }
        },
        urlRoot : "<%= baseUri + '/tag_contexts' %>"
    });

    TagContextCollection = Backbone.Collection.extend({
        model : TagContext
    });

    ConfigLayout = Backbone.Marionette.Layout.extend({
        template: "#config-list-layout-template",

        regions : {
            titleRegion     : "#config-title-div",
            controlRegion   : "#config-control-div",
            configRegion    : "#config-region-div",
        },
    });

    TitleView = Backbone.Marionette.ItemView.extend({
        template: '#config-title-template'
    });

    SiteConfigView = Marionette.ItemView.extend({
        template : '#site-config-view-template',
    });

    var configRegion = new Backbone.Marionette.Region({
        el: "#config-area"
    });


    var tabLists = [];

    function clearDetails() {
        _.invoke(tabLists, 'reset' );
    };

    var Workspace = Backbone.Router.extend({
        routes : {
            'tag_context_config' : 'tag_context_config',
            'conference_config' : 'conference_config',
            'invitation_category_config' : 'invitation_category_config'
        },

        invitation_category_config : function() {
            configRegion.close();

            inviteLayout = new ConfigLayout();
            configRegion.show(inviteLayout);
            inviteLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "config-invitation-categories" %>' }) }) );

            TabUtils.createTabControl({
                template                : "#invite-category-control-template",
                modelType               : InviteCategory,
                view_refresh_event      : "invite_category:refresh",
                modal_create_title      : '<%= t "create-invitation-category" %>',
                region                  : inviteLayout.controlRegion,
            });

            tabLists.push( AppUtils.createCollectionView({
                url                     : "<%= baseUri + '/invitation_categories.json' %>",
                collectionType          : InviteCategoryCollection,
                region                  : inviteLayout.configRegion,
                template                : "#item-format-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "invite_category:refresh",
                modal_edit_title        : '<%= t "edit-invitation-category" %>',
                modal_edit              : true
            }) );
        },

        tag_context_config : function() {
            configRegion.close();

            tagContextLayout = new ConfigLayout();
            configRegion.show(tagContextLayout);
            tagContextLayout.titleRegion.show ( new TitleView({ model : new TitleMdl({ title : '<%= t "config-tag-contexts" %>' }) }) );

            TabUtils.createTabControl({
                template                : "#tag-context-control-template",
                modelType               : TagContext,
                view_refresh_event      : "tag_context:refresh",
                modal_create_title      : '<%= t "create-tag-context" %>',
                region                  : tagContextLayout.controlRegion,
            });

            tabLists.push( AppUtils.createCollectionView({
                url                     : "<%= baseUri + '/tag_contexts.json' %>",
                collectionType          : TagContextCollection,
                region                  : tagContextLayout.configRegion,
                template                : "#tag-context-template",
                collection_attributes   : { "class" : "table table-striped table-condensed" },
                collection_tagName      : 'table',
                tagName                 : 'tr',
                view_refresh_event      : "tag_context:refresh",
                modal_edit_title        : '<%= t "edit-tag-context" %>',
                modal_edit              : true
            }) );
        },

        conference_config : function() {
            configRegion.close();

            configLayout = new ConfigLayout();
            configRegion.show(configLayout);

            var config = new SiteConfig();
            config.fetch({
                success : function(mdl) {

                    var view = AppUtils.createEditItemView({
                        model           : mdl,
                        itemArea        : "#config-control-div",
                        readTemplate    : '#site-config-view-template',
                        updateCallback  : function(mdl) {
                            // TODO - set the tzOffset based on the offset at the server TEST
                            tzOffset = mdl.get('tz_offset');
                        }
                    });
                }
            });
        }
    });

    /*
     *
     */
    return {
        configRegion : configRegion,
        ConfigLayout : ConfigLayout,

        init : function(options) {
            new Workspace();
        }
    }

})(Backbone);

/*
 *
 */
jQuery(document).ready(function() {
    ConfigApp.addInitializer(ConfigApp.ConfigManagement.init);
    ConfigApp.start({});
});

</script>

<% @extra_javascript.each do |extra| %>
    <%= render extra %>
<% end %>
