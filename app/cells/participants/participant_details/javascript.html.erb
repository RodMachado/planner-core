<script type="text/javascript">

ParticipantApp = new Backbone.Marionette.Application();

ParticipantApp.PeopleManagement = (function(Backbone){
    var eventAggregator = AppUtils.eventAggregator;
    var selectCallbacks = $.Callbacks();

    //
    //
    //
    Address = Backbone.Model.extend({
        schema : {
            line1 : { type : 'Text', title : '<%= t "line1" %>' },
            line2 : { type : 'Text', title : '<%= t "line2" %>' },
            line3 : { type : 'Text', title : '<%= t "line3" %>' },
            city : { type : 'Text', title : '<%= t "city" %>' },
            state : { type : 'Text', title : '<%= t "state" %>' },
            postcode : { type : 'Text', title : '<%= t "post-code" %>' },
            country : { type : 'Text', title : '<%= t "country" %>' },
            isdefault : { type : 'Checkbox', title : '<%= t "is-default" %>'},
        },
        urlRoot : "<%= baseUri + '/postal_addresses' %>"
    });
    
    AddressCollection = Backbone.Collection.extend({
        model : Address
    });
    
    EmailAddress = Backbone.Model.extend({
        schema : {
            email : { type : 'Text', title : '<%= t "email" %>'},
            isdefault : { type : 'Checkbox', title : '<%= t "is-default" %>'}
        },
        urlRoot : "<%= baseUri + '/email_addresses' %>"
    });
    
    EmailCollection = Backbone.Collection.extend({
        model : EmailAddress
    });
    
    PhoneNumber = Backbone.Model.extend({
        schema : {
            number : { type : 'Text', title : '<%= t "phone-number" %>'},
            phone_type_id : { type : 'Select', title : '<%= t "phone type" %>', options : <%= PhoneTypes.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }.to_json.html_safe %> },
        },
        urlRoot : "<%= baseUri + '/phone_numbers' %>"
    });
    
    PhoneCollection = Backbone.Collection.extend({
        model : PhoneNumber
    });

    //
    //
    //
    RegistrationDetail = Backbone.Model.extend({
        schema : {
            registration_number : { type : 'Number', title : '<%= t "reg-number" %>' },
            registration_type : { type : 'Text', title : '<%= t "reg-type" %>' },
            registered : { type : 'Checkbox', title : '<%= t "registered" %>' },
        },
        urlRoot: "<%= baseUri + '/registrationDetails' %>"
    });
    
    //
    Pseudonym = Backbone.Model.extend({
        schema : {
            first_name  : { type : 'Text', title : '<%= t "first-name" %>'},
            last_name  : { type : 'Text', title : '<%= t "last-name" %>'},
            suffix  : { type : 'Text', title : '<%= t "suffix" %>'},
        }
    });
    
    InviteDetails = Backbone.DeepModel.extend({
        schema : {
            first_name : { type : 'Text', title : '<%= t "first-name" %>', editorAttrs : { placeholder : '<%= t "first-name" %>' } },
            last_name : { type : 'Text', title : '<%= t "last-name" %>', editorAttrs : { placeholder : '<%= t "last-name" %>' }, validators: ['required'] },
            suffix : { type : 'Text', title : '<%= t "suffix" %>', editorAttrs : { placeholder : '<%= t "suffix" %>' } },
            'pseudonym.first_name' : { type : 'Text', title : '<%= t "pub-first-name" %>', editorAttrs : { placeholder : '<%= t "pub-first-name" %>' } },
            'pseudonym.last_name' : { type : 'Text', title : '<%= t "pub-last-name" %>', editorAttrs : { placeholder : '<%= t "pub-last-name" %>' } },
            'pseudonym.suffix' : { type : 'Text', title : '<%= t "pub-suffix" %>', editorAttrs : { placeholder : '<%= t "suffix" %>' } },
            'company' : { type : 'Text', title : '<%= t "company" %>', editorAttrs : { placeholder : '<%= t "company" %>' } },
            'job_title' : { type : 'Text', title : '<%= t "job-title" %>', editorAttrs : { placeholder : '<%= t "job-title" %>' } },
            'comments' : { type : 'TextArea', title : '<%= t "comments" %>' },
            invitestatus_id : { type : 'Select', title : '<%= t "invitation-status" %>', options : <%= InviteStatus.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }.to_json.html_safe %> },
            acceptance_status_id : { type : 'Select', title : '<%= t "acceptance-status" %>', options : <%= AcceptanceStatus.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }.to_json.html_safe %> },
            invitation_category_id : { type : 'Select', title : '<%= t "invitation-category" %>', options : <%= [[' ',' ']].concat(InvitationCategory.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },

        },
        urlRoot : "<%= baseUri + '/participants' %>"
    });

    //
    BioDetails = Backbone.Model.extend({
        schema : {
            survey_bio : { type : 'TextArea', title : '<%= t "bio-from-survey" %>', editorAttrs: { readonly : true, rows : 6, cols : 60 } },
            bio : { type : 'Html', title : '<%= t "bio" %>', editorAttrs: { rows : 6, cols : 60 } },
            facebook : { type : 'Text', title : '<%= t "participant-facebook-url" %>' },
            othersocialmedia : { type : 'Text', title : '<%= t "other-social-media" %>' },
            photourl : { type : 'Text', title : '<%= t "participant-photo" %>' },
            twitterinfo : { type : 'Text', title : '<%= t "participant-twitter-handle" %>' },
            website : { type : 'Text', title : '<%= t "participant-url" %>' }
        },
        urlRoot : "<%= baseUri + '/edited_bios' %>"
    });
    
    BioPicture = Backbone.Model.extend({
        schema : {
            bio_picture : { type : 'CLImage', title : 'Bio Pic',
                cl_image_upload_tag : '<%= cl_image_upload_tag(:bio_picture) %>'
            }
        },
        urlRoot : "<%= baseUri + '/bio_images' %>"
    });
    
    //
    ProgramItem = Backbone.Model.extend({
    });
    ProgramItemCollection = Backbone.Collection.extend({
        model : ProgramItem
    });
    
    //
    TagContext = Backbone.Model.extend({
    });
    TagContextCollection = Backbone.Collection.extend({
        model : TagContext
    });
    
    //
    TagFilter = Backbone.Model.extend({
        // Context name & Tag name
        // no ids cause no sync with backend
    });
    TagFilterCollection = Backbone.Collection.extend({
        model : TagFilter
    });
    
    //
    AvailabilityDateModel = Backbone.RelationalModel.extend({
        schema : {
            start_time : { type : 'Datetime', title : '<%= t "item-start-time" %>',
                    tz_offset : <%= Time.zone.parse(@start_date.start_date.to_s).utc_offset/(60*60) %>,
                    picker : {
                        useSeconds : false,
                        minuteStepping : 15,
                        orientation : 'left',
                        format : "DD MMM YYYY, HH:mm",
                        defaultDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>",
                        startDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>",
                        endDate : "<%= (Time.zone.parse(@start_date.start_date.to_s) + ((@start_date.number_of_days).to_i).days).strftime('%m/%d/%Y') %>"
                } },
            end_time : { type : 'Datetime', title : '<%= t "item-end-time" %>',
                    tz_offset : <%= Time.zone.parse(@start_date.start_date.to_s).utc_offset/(60*60) %>,
                    picker : {
                        useSeconds : false,
                        minuteStepping : 15,
                        orientation : 'left',
                        format : "DD MMM YYYY, HH:mm",
                        defaultDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>",
                        startDate : "<%= Time.zone.parse(@start_date.start_date.to_s).strftime('%m/%d/%Y') %>",
                        endDate : "<%= (Time.zone.parse(@start_date.start_date.to_s) + ((@start_date.number_of_days).to_i).days).strftime('%m/%d/%Y') %>"
                } }
        },
        urlRoot : "<%= baseUri + '/available_dates' %>"
    });
    ExcludedItemModel = Backbone.RelationalModel.extend({});
    ExcludedItemCollection = Backbone.Collection.extend({
        model : ExcludedItemModel
    });
    ExcludedTimesModel = Backbone.RelationalModel.extend({
    });
    ExcludedTimesCollection = Backbone.Collection.extend({
        model : ExcludedTimesModel
    });
    Exclusions = Backbone.RelationalModel.extend({
        relations: [{
            type: Backbone.HasMany,
            key: 'items',
            relatedModel: 'ExcludedItemModel',
            collectionType : 'ExcludedItemCollection',
        }, {
            type: Backbone.HasMany,
            key: 'times',
            relatedModel: 'ExcludedTimesModel',
            collectionType : 'ExcludedTimesCollection',
        }
        ]
    });
    /******************************************************
     * 
     */
    PersonTabLayout = Backbone.Marionette.Layout.extend({
        template : "#person-tab-layout-template",
        
        regions : {
            registration    : "#registration-tab",
            contacts        : "#contacts-tab",
            published_info  : "#published-info-tab",
            invite          : "#invite-tab",
            bio             : "#bio-tab",
            bio_image       : "#bio-image",
            tags            : "#tags-tab",
            availability    : "#availability-div",
            exclusion_items : "#exclusion-items-div",
            exclusion_times : "#exclusion-times-div",
            items           : "#items-tab"
        }
    });

    AddressLayout = Backbone.Marionette.Layout.extend({
        template: "#address-layout-template",
        
        regions : {
            postalControlRegion: "#postal-control-div",
            postalRegion: "#postal-region-div",
            emailControlRegion: "#email-control-div",
            emailRegion: "#email-region-div",
            phoneControlRegion: "#phone-control-div",
            phoneRegion: "#phone-region-div",
        },
    });
    
    SummaryLayout = Backbone.Marionette.Layout.extend({
        template: "#summary-layout-template",
        
        regions : {
            identity    : "#id-region-div",
            registration: "#reg-region-div"
        },
    });
    
    PublishedInfoLayout = Backbone.Marionette.Layout.extend({
        template: "#published-info-layout-template",
        
        regions : {
            picture : "#picture-region-div",
            bio     : "#bio-region-div"
        },
    });

    var tabLists = [];
    var tabContent = [];
    var filters = null;
    var personTabLayout = null;

    function clearRegDetails() {
        $('#selected-participant').text("");
        
        if (personTabLayout) {
            personTabLayout.registration.close();
            personTabLayout.contacts.close();
            personTabLayout.published_info.close();
            personTabLayout.invite.close();
            personTabLayout.bio.close();
            personTabLayout.bio_image.close();
            personTabLayout.tags.close();
            personTabLayout.availability.close();
            personTabLayout.exclusion_items.close();
            personTabLayout.exclusion_times.close();
            personTabLayout.items.close();
        };
        
        eventAggregator.off("refreshTagList", syncModel);
        
        _.invoke(tabContent, 'clear' );
    };

    function syncModel() {
        this.fetch({async : false});
    };
    
    function getPersonName(data) {
        var res = "";

        if (typeof data['person[pseudonym_attributes][first_name]'] != 'undefined') {
            if (data['person[pseudonym_attributes][first_name]']) {
                res += data['person[pseudonym_attributes][first_name]'];
            };
        };
        if (typeof data['person[pseudonym_attributes][last_name]'] != 'undefined') {
            if (data['person[pseudonym_attributes][last_name]']) {
                if (res.length > 0) {
                    res += ' ';
                };
                res += data['person[pseudonym_attributes][last_name]'];
            };
        };
        if (typeof data['person[pseudonym_attributes][suffix]'] != 'undefined') {
            if (data['person[pseudonym_attributes][suffix]']) {
                if (res.length > 0) {
                    res += ' ';
                };
                res += data['person[pseudonym_attributes][suffix]'];
            };
        };
        
        var name = (data['person[first_name]'] + ' ' + data['person[last_name]'] + ' ' + data['person[suffix]']).trim();
                    
        if (res.length > 0) {
            if (name.length > 0) {
                res += " (" +  name + ")";
            }
        } else {
            res = name;
        };

        return res;
    };

    function showRegDetails(id) {
        var data = jQuery("#participants").jqGrid('getRowData', id);
        $('#selected-participant').text(getPersonName(data));

        summaryLayout = new SummaryLayout();
        personTabLayout.invite.show(summaryLayout);
        
        SurveyReviewApp.Reviews.showSurveySelector(id);

        jQuery("#mail-history").mailHistoryBootstrapTable('personHistory',{
            person_id : id
        });

        TabUtils.createTabContent({
            modelType : RegistrationDetail,
            url : "<%= baseUri + '/participants/' %>" + id + "/registrationDetails.json",
            template : '#registration-view-template',
            region : summaryLayout.registration,
            id : id,
            id_name : 'person_id',
            newTitle : '<%= t "create-registration" %>',
            editTitle : '<%= t "edit-registration" %>',
        });
        
        var invite_details = TabUtils.createTabContent({
            modelType : InviteDetails,
            modal_template : "#person-form-template",
            url : "<%= baseUri + '/participants/' %>" + id + ".json",
            template : '#invite-view-template',
            region : summaryLayout.identity,
            id : id,
            id_name : 'person_id',
            newTitle : '<%= t "create-invite" %>',
            editTitle : '<%= t "edit-invite" %>',
            updateCallback : function(mdl) {
                $("#participants").jqGrid('setGridParam', {
                    loadComplete: function(data) {
                        $("#participants").jqGrid('setSelection', id); // when load is complete the selection is called...
                        $(this).jqGrid('setGridParam', { loadComplete: function() {} });
                    }
                });
                $("#participants").trigger("reloadGrid");
            },
            events : {
                'click .model-generate-invite-key-button' : function() {
                    mdl = this.model;
                    $.ajax({
                        url : "<%= baseUri + '/participants/generateInviteKey/' %>" + id + ".json",
                        success : function() {
                            mdl.fetch();
                        }
                    })
                }
            }
        });
        tabContent.push( invite_details );

        publishedInfoLayout = new PublishedInfoLayout();
        personTabLayout.published_info.show(publishedInfoLayout);
        
        tabContent.push( TabUtils.createTabContent({
            modelType : BioDetails,
            url : "<%= baseUri + '/participants/' %>" + id + "/edited_bios.json",
            template : '#bio-view-template',
            region : publishedInfoLayout.bio,
            id : id,
            id_name : 'person_id',
            newTitle : '<%= t "create-bio" %>',
            editTitle : '<%= t "edit-bio" %>',
        }) );
        
        tabContent.push( TabUtils.createTabContent({
            modelType : BioPicture,
            url : "<%= baseUri + '/participants/' %>" + id + "/bio_images.json",
            template : '#bio-image-template',
            region : publishedInfoLayout.picture,
            id : id,
            id_name : 'person_id',
            newTitle : '<%= t "create-bio-image" %>',
            editTitle : '<%= t "edit-bio-image" %>',
        }) );
        
        TabUtils.createTabListContent({
            collectionType : ProgramItemCollection,
            url : "<%= baseUri + '/participants/' %>" + id + "/programme_items.json",
            template : "#program-item-view-template",
            collection_tagName : 'table class="table table-hover"',
            tagName : 'tr',
            region : personTabLayout.items,
        });

        TabUtils.createTagListContent({
            collectionType : TagContextCollection,
            url : "<%= baseUri + '/tags/' %>" + id + ".json?class=Person",
            tagUrl : "<%= baseUri + '/tags/' %>" + id + "/add?class=Person",
            template : "#tag-context-layout-template",
            region : personTabLayout.tags,
            newTitle : '<%= t "create-tag" %>',
        });

        //
        // get the exclusions and show them within the layout
        //
        tabContent.push( TabUtils.createTabContent({
            modelType : AvailabilityDateModel,
            url : "<%= baseUri + '/participants/' %>" + id + '/available_dates.json',
            template : '#date-exclusion-view-template',
            region : personTabLayout.availability,
            id : id,
            id_name : 'person_id',
            newTitle : '<%= t "create-availability" %>',
            editTitle : '<%= t "edit-availability" %>'
        }) );

        
        exclusions = new Exclusions();
        exclusions.fetch({
            url : "<%= baseUri + '/participants/' %>" + id + "/availabilities.json",
            success : function(obj) {
                TabUtils.createTabListContent({
                    collection : obj.get('items'),
                    template : "#item-exclusion-view-template",
                    region : personTabLayout.exclusion_items 
                });
                TabUtils.createTabListContent({
                    collection : obj.get('times'),
                    template : "#time-exclusion-view-template",
                    region : personTabLayout.exclusion_times 
                });
            }
        });

        addressLayout = new AddressLayout();
        personTabLayout.contacts.show(addressLayout);

        TabUtils.createTabControl({
            template : "#address-control-template",
            modelType : Address,
            id : id,
            id_name : 'person_id',
            view_refresh_event : "address:refresh",
            modal_create_title : '<%= t "create-address-details" %>',
            region : addressLayout.postalControlRegion
        });
        tabLists.push( TabUtils.createTabListContent({
            collectionType : AddressCollection,
            url : "<%= baseUri + '/participants/' %>" + id + "/postalAddresses.json",
            template : "#address-view-template",
            view_refresh_event : "address:refresh",
            region : addressLayout.postalRegion,
            newTitle : '<%= t "create-address" %>',
            editTitle : '<%= t "edit-address" %>',
        }) );

        
        TabUtils.createTabControl({
            template : "#phone-control-template",
            modelType : PhoneNumber,
            id : id,
            id_name : 'person_id',
            view_refresh_event : "address:refresh",
            modal_create_title : '<%= t "create-phone-number" %>',
            region : addressLayout.phoneControlRegion,
        });
        tabLists.push( TabUtils.createTabListContent({
            collectionType : PhoneCollection,
            url : "<%= baseUri + '/participants/' %>" + id + "/phoneNumbers.json",
            template : "#phone-view-template",
            view_refresh_event : "address:refresh",
            region : addressLayout.phoneRegion,
            newTitle : '<%= t "create-phone-number" %>',
            editTitle : '<%= t "edit-phone-number" %>',
        }) );

        TabUtils.createTabControl({
            template : "#email-control-template", 
            modelType : EmailAddress,
            id : id,
            id_name : 'person_id',
            view_refresh_event : "address:refresh",
            modal_create_title : '<%= t "create-email" %>',    
            region : addressLayout.emailControlRegion
        });
        tabLists.push( TabUtils.createTabListContent({
            collectionType : EmailCollection,
            url : "<%= baseUri + '/participants/' %>" + id + "/emailAddresses.json",
            template : "#email-view-template",
            view_refresh_event : "address:refresh",
            region : addressLayout.emailRegion,
            newTitle : '<%= t "create-email" %>',
            editTitle : '<%= t "edit-email" %>',
        }) );
        
        eventAggregator.on("refreshTagList", syncModel, invite_details);

        selectCallbacks.fire({
            id : id,
            model : invite_details
        });
        
        return invite_details;
    };
    
    var filterCol = null;

    //
    //
    //    
    return {
        addSelectCallback : function(func) {
            selectCallbacks.add(func);
        },
        
        init : function() {
            personTabLayout = new PersonTabLayout();
            personTabLayout.render();
            $('#item-tabs').html(personTabLayout.el);

            TabUtils.createTagCloudContent({
                collectionType : TagContextCollection,
                url : "<%= baseUri + '/tags.json?class=Person' %>",
                template : "#tag-cloud-context-layout-template",
                place : '#participant-tag-cloud',
                collection_attributes : { "class" : "accordion", "id" : "participant-tag-cloud-parent" },
                view_attributes : { "class" : "accordion-group" },
                tagselect : function(context, name) {
                    ParticipantApp.PeopleManagement.addFilter(context, name);
                    ParticipantApp.PeopleManagement.refreshTable();
                },
            });
            
            $('#participant-tabs').tabdrop({
                text : "..."
            });
        },
        
        InviteDetails : InviteDetails,
        
        showDetails : function(id) {
            clearRegDetails();
            return showRegDetails(id);
        },
        clearDetails : function() {
            clearRegDetails();
        },
        addFilter : function(context, name) {
            if (!filters) {
                filters = new TagFilterCollection();
            }
            
            if (!filterCol) {
                filterCol = TabUtils.createTabListContent({
                    collection : filters,
                    template : "#participant-filters-template",
                    place : "#participant-filters",
                    collection_attributes : { "class" : "clearfix" },
                    tagremove : function(context, name) {
                        // force a refresh of the table etc
                        ParticipantApp.PeopleManagement.refreshTable();
                    },
                    view_attributes : { "style" : "display : inline" },
                });
                
            }
            
            filters.add(
                new TagFilter({
                    context : context,
                    name : name
                })
            );
        },

        getTagQuery : function() {
            var tagQuery = "";
            
            // go through the filters are create the query for the tags ...
            if (filters) {
                // convert the filters into an associative array and then build the query...
                var filterArray = {}
                _.each(filters, function(el, index, list) {
                    var ctx = filters.at(index).get('context');
                    if (!filterArray[ctx]) {
                        filterArray[ctx] = filters.at(index).get('name');
                    } else {
                        filterArray[ctx] += ',' + filters.at(index).get('name');                    
                    };
                });
                var str = "";
                var index = 0;
                _.each(filterArray, function(val, key, list) {
                    if (index > 0) {
                        str += "&";
                    };
                    str += "context[" + index + "]=" + key + "&tags[" + index + "]=" + val;
                    index += 1;
                });
                tagQuery = str;
            }
            
            return tagQuery;
        },
        
        refreshTable : function() {
            // get the tags etc from the view and create the query
            var tagQuery = ParticipantApp.PeopleManagement.getTagQuery();
            jQuery("#participants").participantTable('tagQuery',{
                tagQuery : tagQuery
            });
        },
        
        showEmail : function(row, data) {
            modal = new AppUtils.InfoModal({
                            content : data.content,
                            title : '<%= t "email" %>'
                    });
            modal.render();
        }
    };
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    ParticipantApp.addInitializer(ParticipantApp.PeopleManagement.init);
    ParticipantApp.start();
});
</script>


<% @extra_javascript.each do |extra| %>
    <%= render extra %>
<% end %>

