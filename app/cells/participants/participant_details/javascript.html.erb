<script type="text/javascript">

ParticipantApp = new Backbone.Marionette.Application();

ParticipantApp.PeopleManagement = (function(Backbone){

    //
    //
    //
    Address = Backbone.Model.extend({
        schema : {
            line1 : { type : 'Text' },
            line2 : { type : 'Text' },
            line3 : { type : 'Text' },
            city : { type : 'Text' },
            state : { type : 'Text' },
            postcode : { type : 'Text' },
            country : { type : 'Text' },
            isdefault : { type : 'Checkbox'},
        },
        urlRoot : '/postal_addresses'
    });
    
    AddressCollection = Backbone.Collection.extend({
        model : Address
    });
    
    EmailAddress = Backbone.Model.extend({
        schema : {
            email : { type : 'Text'},
            isdefault : { type : 'Checkbox'}
        },
        urlRoot : '/email_addresses'
    });
    
    EmailCollection = Backbone.Collection.extend({
        model : EmailAddress
    });
    
    PhoneNumber = Backbone.Model.extend({
        schema : {
            number : { type : 'Text'},
            phone_type_id : { type : 'Select', options : <%= PhoneTypes.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }.to_json.html_safe %> },
        },
        urlRoot : '/phone_numbers'
    });
    
    PhoneCollection = Backbone.Collection.extend({
        model : PhoneNumber
    });

    //
    //
    //
    RegistrationDetail = Backbone.Model.extend({
        schema : {
            registration_number : { type : 'Number', title : 'Registration Number' },
            registration_type : { type : 'Text', title : "Registration Type" },
            registered : { type : 'Checkbox', title : 'Registered' },
        },
        urlRoot: '/registrationDetails'
    });
    
    //
    InviteDetails = Backbone.Model.extend({
        urlRoot : '/inviteDetails'
    });
    
    //
    BioDetails = Backbone.Model.extend({
        schema : {
            survey_bio : { type : 'TextArea', editorAttrs: { readonly : true, rows : 6, cols : 60 } },
            bio : { type : 'TextArea', editorAttrs: { rows : 6, cols : 60 } },
            facebook : { type : 'Text' },
            othersocialmedia : { type : 'Text' },
            photourl : { type : 'Text' },
            twitterinfo : { type : 'Text' },
            website : { type : 'Text' }
        },
        urlRoot : '/edited_bios'
    });
    
    //
    ProgramItem = Backbone.Model.extend({
    });
    ProgramItemCollection = Backbone.Collection.extend({
        model : ProgramItem
    });
    
    //
    TagContext = Backbone.Model.extend({
    });
    TagContextCollection = Backbone.Collection.extend({
        model : TagContext
    });
    
    //
    TagFilter = Backbone.Model.extend({
        // Context name & Tag name
        // no ids cause no sync with backend (how to avoid dups? - TODO)
    });
    TagFilterCollection = Backbone.Collection.extend({
        model : TagFilter
    });
    
    //
    AvailabilityDateModel = Backbone.RelationalModel.extend({
        schema : {
            start_time : { type : 'DateTime', title : 'Arrival Time'},
            end_time : { type : 'DateTime', title : 'Departure Time'}
        },
        urlRoot : '/available_dates'
    });
    ExcludedItemModel = Backbone.RelationalModel.extend({});
    ExcludedItemCollection = Backbone.Collection.extend({
        model : ExcludedItemModel
    });
    ExcludedTimesModel = Backbone.RelationalModel.extend({});
    ExcludedTimesCollection = Backbone.Collection.extend({
        model : ExcludedTimesModel
    });
    Exclusions = Backbone.RelationalModel.extend({
        relations: [{
            type: Backbone.HasMany,
            key: 'items',
            relatedModel: 'ExcludedItemModel',
            collectionType : 'ExcludedItemCollection',
        }, {
            type: Backbone.HasMany,
            key: 'times',
            relatedModel: 'ExcludedTimesModel',
            collectionType : 'ExcludedTimesCollection',
        }, {
            type: Backbone.HasOne,
            key: 'dates',
            relatedModel: 'AvailabilityDateModel',
        }
        ]
    });

    /******************************************************
     * 
     */
    AddressLayout = Backbone.Marionette.Layout.extend({
        template: "#address-layout-template",
        
        regions : {
            postalControlRegion: "#postal-control-div",
            postalRegion: "#postal-region-div",
        },
    });

    PhoneLayout = Backbone.Marionette.Layout.extend({
        template: "#phone-layout-template",
        
        regions : {
            phoneControlRegion: "#phone-control-div",
            phoneRegion: "#phone-region-div",
        },
    });
    EmailLayout = Backbone.Marionette.Layout.extend({
        template: "#email-layout-template",
        
        regions : {
            emailControlRegion: "#email-control-div",
            emailRegion: "#email-region-div",
        },
    });
    
    ExclusionsLayout = Backbone.Marionette.Layout.extend({
        template: "#exclusions-layout-template",
        
        regions : {
            datesRegion: "#dates-exclusions-div",
            itemsRegion: "#items-exclusions-div",
            timesRegion: "#times-exclusions-div",
        },
    });

    var tabLists = [];
    var tabContent = [];
    var filters = null;

    function clearRegDetails() {
        $('#selected-participant').text("");
        
        _.invoke(tabLists, 'reset' );
        _.invoke(tabContent, 'clear' );
    };

    function showRegDetails(id) {
        var data = jQuery("#participants").jqGrid('getRowData', id);
        $('#selected-participant').text(data['person[first_name]'] + ' ' + data['person[last_name]'] + ' ' + data['person[suffix]']);
        
        tabContent.push( TabUtils.createTabContent({
            modelType : RegistrationDetail,
            url : "/participants/" + id + "/registrationDetails.json",
            template : '#registration-view-template',
            place :'#registration-view',
            id : id,
            id_name : 'person_id',
            newTitle : "Create Registration",
            editTitle : "Edit Registration",
        }) );

        tabContent.push( 
            TabUtils.createTabContent({
            modelType : InviteDetails,
            url : "/participants/" + id + ".json",
            template : '#invite-view-template',
            place : '#invite-view',
            id : id,
            id_name : 'person_id',
            newTitle : "Create Invite",
            editTitle : "Edit Invite",
        }) );
        
        tabContent.push( 
            TabUtils.createTabContent({
            modelType : BioDetails,
            url : "/participants/" + id + "/edited_bios.json",
            template : '#bio-view-template',
            place : '#bio-view',
            id : id,
            id_name : 'person_id',
            newTitle : "Create Bio",
            editTitle : "Edit Bio",
        }) );
        
        
        tabLists.push( TabUtils.createTabListContent({
            collectionType : ProgramItemCollection,
            url : "/participants/"+ id + "/programme_items.json",
            template : "#program-item-view-template",
            view_refresh_event : "address:refresh",
            place : '#items-view',
        }) );

        
        // ------
        addressLayout = new AddressLayout();
        addressLayout.render();
        $('#contacts-view').html(addressLayout.el);
        
        phoneLayout = new PhoneLayout();
        phoneLayout.render();
        $('#phone-view').html(phoneLayout.el);

        emailLayout = new EmailLayout();
        emailLayout.render();
        $('#email-view').html(emailLayout.el);


        TabUtils.createTabControl({
            template : "#address-control-template",
            modelType : Address,
            id : id,
            id_name : 'person_id',
            view_refresh_event : "address:refresh",
            modal_create_title : "Create Address Details",
            region : addressLayout.postalControlRegion
        });
        tabLists.push( TabUtils.createTabListContent({
            collectionType : AddressCollection,
            url : "/participants/"+ id + "/postalAddresses.json",
            template : "#address-view-template",
            view_refresh_event : "address:refresh",
            region : addressLayout.postalRegion,
            newTitle : "Create Address",
            editTitle : "Edit Address",
        }) );
        
        TabUtils.createTabControl({
            template : "#phone-control-template",
            modelType : PhoneNumber,
            id : id,
            id_name : 'person_id',
            view_refresh_event : "address:refresh",
            modal_create_title : "Create Phone Number",
            region : phoneLayout.phoneControlRegion,
        });
        tabLists.push( TabUtils.createTabListContent({
            collectionType : PhoneCollection,
            url : "/participants/"+ id + "/phoneNumbers.json",
            template : "#phone-view-template",
            view_refresh_event : "address:refresh",
            region : phoneLayout.phoneRegion,
            newTitle : "Create Phone Number",
            editTitle : "Edit Phone Number",
        }) );

        TabUtils.createTabControl({
            template : "#email-control-template", 
            modelType : EmailAddress,
            id : id,
            id_name : 'person_id',
            view_refresh_event : "address:refresh",
            modal_create_title : "Create Email",
            region : emailLayout.emailControlRegion
        });
        tabLists.push( TabUtils.createTabListContent({
            collectionType : EmailCollection,
            url : "/participants/"+ id + "/emailAddresses.json",
            template : "#email-view-template",
            view_refresh_event : "address:refresh",
            region : emailLayout.emailRegion,
            newTitle : "Create Email",
            editTitle : "Edit Email",
        }) );
        
        // /tags/2108/add?class=Person&context=PrimaryArea 
        tabLists.push( TabUtils.createTagListContent({
            collectionType : TagContextCollection,
            url : "/tags/"+ id + "?class=Person",
            tagUrl : "/tags/"+ id + "/add?class=Person",
            template : "#tag-context-layout-template",
            view_refresh_event : "address:refresh",
            place : '#tags-view',
            newTitle : "Create Tag",
        }) );

        //
        // get the exclusions and show them within the layout
        //
        exclusionLayout = new ExclusionsLayout();
        exclusionLayout.render();
        $('#availability-view').html(exclusionLayout.el);
        
        exclusions = new Exclusions();
        exclusions.fetch({
            url : "/participants/" + id + "/availabilities.json",
            success : function(obj) {
                tabLists.push( TabUtils.createTabListContent({
                    collection : obj.get('items'),
                    template : "#item-exclusion-view-template",
                    region : exclusionLayout.itemsRegion 
                }) );
                tabLists.push( TabUtils.createTabListContent({
                    collection : obj.get('times'),
                    template : "#time-exclusion-view-template",
                    region : exclusionLayout.timesRegion 
                }) );

                var availability = obj.get('dates');
                if (availability) {
                    //alert(availability.id);
                    availability.url = '/available_dates/' + availability.id;
                    tabContent.push( TabUtils.createTabContent({
                        id : id,
                        id_name : 'person_id',
                        modelType : AvailabilityDateModel,
                        model : availability,
                        template : '#date-exclusion-view-template',
                        region : exclusionLayout.datesRegion,
                        newTitle : "Create Availability",
                        editTitle : "Edit Availability",
                    }) );
                } else {
                    /* TODO TODO TODO */
                    // TODO - need a control area to create a new instance
                }
            }
        });
    };
    
    /*
     * To add parameters for the list
     * http://sandbox.myconferenceplanning.org/participants/list?   context[0]=Texas&tags[0]=The%20Alamo,&
     * http://sandbox.myconferenceplanning.org/participants/list?   context[0]=Texas&tags[0]=The%20Alamo,San%20Antonio,&
     */
    
    var filterCol = null;

    //
    //
    //    
    return {
        showDetails : function(id) {
            showRegDetails(id);
        },
        clearDetails : function() {
            clearRegDetails();
        },
        addFilter : function(context, name) {
            // TODO - add the context and tag to the TagFilterCollection
            // associate the collection with a view if not already

            if (!filters) {
                filters = new TagFilterCollection();
            }
            
            if (!filterCol) {
                filterCol = TabUtils.createTabListContent({
                    collection : filters,
                    template : "#participant-filters-template",
                    place : "#participant-filters",
                    collection_attributes : { "class" : "clearfix" },
                    tagremove : function(context, name) {
                        // alert("removed tag");
                        // force a refresh of the table etc
                        ParticipantApp.PeopleManagement.refreshTable();
                    },
                    view_attributes : { "style" : "display : inline" }, // TODO - move the style to the style-sheet
                });
                
            }
            
            filters.add(
                new TagFilter({
                    context : context,
                    name : name
                })
            );
        },

        getTagQuery : function() {
            var tagQuery = "";
            
            // go through the filters are create the query for the tags ...
            if (filters) {
                // convert the filters into an associative array and then build the query...
                var filterArray = {}
                _.each(filters, function(el, index, list) {
                    var ctx = filters.at(index).get('context');
                    if (!filterArray[ctx]) {
                        filterArray[ctx] = filters.at(index).get('name');
                    } else {
                        filterArray[ctx] += ',' + filters.at(index).get('name');                    
                    };
                });
                var str = "";
                var index = 0;
                _.each(filterArray, function(val, key, list) {
                    if (index > 0) {
                        str += "&";
                    };
                    str += "context[" + index + "]=" + key + "&tags[" + index + "]=" + val;
                    index += 1;
                });
                tagQuery = str;
            }
            
            return tagQuery;
        },
        
        refreshTable : function() {
            // get the tags etc from the view and create the query
            var tagQuery = ParticipantApp.PeopleManagement.getTagQuery();
            jQuery("#participants").cpParticipantTable('tagQuery',{ 
                tagQuery : tagQuery
            });
        }
    };
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    ParticipantApp.start();
    
    // TODO - we want a way to keep a handle on this so that it can be refreshed when tags are added or deleted from a participant
    // So add it to a collection or ParticipantApp ????
    TabUtils.createTagCloudContent({
        collectionType : TagContextCollection,
        url : "/tags?class=Person",
        template : "#tag-cloud-context-layout-template",
        place : '#participant-tag-cloud',
        collection_attributes : { "class" : "accordion", "id" : "participant-tag-cloud-parent" },
        view_attributes : { "class" : "accordion-group" },
        tagselect : function(context, name) {
            ParticipantApp.PeopleManagement.addFilter(context, name);
            ParticipantApp.PeopleManagement.refreshTable();
        },
    });
});
</script>

