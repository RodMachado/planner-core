<script type="text/javascript">

ItemApp = new Backbone.Marionette.Application();

ItemApp.ItemManagement = (function(Backbone){

    /*
     * 
     */    
    ProgramItem = Backbone.Model.extend({
        schema : {
            title       : { type : 'Text' },
            short_title : { type : 'Text' },
            precis : { type : 'TextArea', editorAttrs: { rows : 6, cols : 60 } },
            notes : { type : 'TextArea', editorAttrs: { rows : 6, cols : 60 } },
            format_id : { type : 'Select', options : <%= [[' ',' ']].concat(Format.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            setup_type_id : { type : 'Select', options : <%= [[' ',' ']].concat(SetupType.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            print : { type : 'Checkbox'},
            duration : { type : 'Number', validators: ['required'] },
            minimum_people : { type : 'Number' },
            maximum_people : { type : 'Number' },
            room_id : { type : 'Select', options : <%= [[' ',' ']].concat(Room.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> }, // TODO
            start_day : { type : 'Select', options : <%=  ([[' ','-1']].concat((0..((SITE_CONFIG[:conference][:number_of_days]).to_i-1)).to_a.collect{ |r| [(Time.zone.parse(SITE_CONFIG[:conference][:start_date]) + r.days).strftime('%A'), r]})).collect {|i,l| {'val' => l, 'label' => i}}.to_json.html_safe%> },
            start_time : { type : 'Time' }, // TODO - verify that this works

            pub_reference_number : { type : 'Text' },
        },
        defaults: {
            "duration":  "",
        },
        urlRoot : '/programme_items' // TODO - on update event etc we need to refresh the grid and the selected details
    });
    
    Equipment = Backbone.Model.extend({
        schema : {
            equipment_type_id : { type : 'Select', options : <%= [].concat(EquipmentType.find(:all).collect {|s| {'val' => s.id, 'label' => s.description} }).to_json.html_safe %> },
        },
        urlRoot : '/equipment_needs'
    });
    
    EquipmentCollection = Backbone.Collection.extend({
        model : Equipment
    });
    
    //
    TagContext = Backbone.Model.extend({
    });
    TagContextCollection = Backbone.Collection.extend({
        model : TagContext
    });
    TagFilter = Backbone.Model.extend({
        // Context name & Tag name
        // no ids cause no sync with backend (how to avoid dups? - TODO)
    });
    TagFilterCollection = Backbone.Collection.extend({
        model : TagFilter
    });

    /*
     * 
     */
    EquipmentLayout = Backbone.Marionette.Layout.extend({ // TODO
        template: "#equipment-layout-template",
        
        regions : {
            equipmentControlRegion: "#equipment-control-div",
            equipmentRegion: "#equipment-region-div",
        },
    });
        
    /*
     * 
     */
    var tabLists = [];
    var tabContent = [];
    var filters = null;
    
    function clearDetails() {
        $('#selected-program-item').text("");
        
        _.invoke(tabLists, 'reset' );
        _.invoke(tabContent, 'clear' );
    };
    
    function showDetails(id) {
        // alert(id);
        var data = jQuery("#items").jqGrid('getRowData', id);
        $('#selected-program-item').html(data['item[title]']);
        
        tabContent.push( TabUtils.createTabContent({
            modelType : ProgramItem,
            url : "/programme_items/" + id + '.json', // TODO
            template : '#program-item-view-template',
            place :'#program-item-view',
            id : id,
            id_name : 'programme_item_id',
            editTitle : "Edit Item",
            updateCallback : function(mdl) {
                // 1. we need to refresh the row in the table (or the current table)
                // and make sure that the row is selected
                // Also need to update the title above the tabs
                $("#items").jqGrid('setGridParam', {
                    loadComplete: function(data) {
                        // alert("dd");
                        $("#items").jqGrid('setSelection', id); // when load is complete the selection is called...
                        // load complete is called every time... only want it once, so remove it after it has been used...
                        $(this).jqGrid('setGridParam', { loadComplete: function() {} });
                    }
                });
                $("#items").trigger("reloadGrid");
            }
        }) );
        
        equipmentLayout = new EquipmentLayout();
        equipmentLayout.render();
        $('#equipment-view').html(equipmentLayout.el);

        TabUtils.createTabControl({
            template : "#equipment-control-template",
            modelType : Equipment,
            id : id, // need to pass in the name of the id field
            id_name : 'programme_item_id',
            view_refresh_event : "equipment:refresh",
            modal_create_title : "Create Equipment Needs",
            region : equipmentLayout.equipmentControlRegion
        });
        tabLists.push( TabUtils.createTabListContent({
            collectionType : EquipmentCollection,
            url : "/programme_items/"+ id + "/equipment_needs.json",
            template : "#equipment-detail-template",
            view_refresh_event : "equipment:refresh",
            region : equipmentLayout.equipmentRegion,
            newTitle : "Create Equipment",
            editTitle : "Edit Equipment",
        }) );
        
        tabLists.push( TabUtils.createTagListContent({
            collectionType : TagContextCollection,
            url : "/tags/"+ id + "?class=ProgrammeItem",
            tagUrl : "/tags/"+ id + "/add?class=ProgrammeItem",
            template : "#tag-context-layout-template",
            view_refresh_event : "address:refresh",
            place : '#tags-view',
            newTitle : "Create Tag",
        }) );

    };
    
    var filterCol = null;
    
    return {
        showDetails : function(id) {
            showDetails(id);
        },
        clearDetails : function() {
            clearDetails();
        },

        addFilter : function(context, name) {
            // TODO - add the context and tag to the TagFilterCollection
            // associate the collection with a view if not already

            if (!filters) {
                filters = new TagFilterCollection();
            }
            
            if (!filterCol) {
                filterCol = TabUtils.createTabListContent({
                    collection : filters,
                    template : "#item-filters-template",
                    place : "#item-filters",
                    collection_attributes : { "class" : "clearfix" },
                    tagremove : function(context, name) {
                        // alert("removed tag");
                        // force a refresh of the table etc
                        ItemApp.ItemManagement.refreshTable();
                    },
                    view_attributes : { "style" : "display : inline" }, // TODO - move the style to the style-sheet
                });
                
            }
            
            filters.add(
                new TagFilter({
                    context : context,
                    name : name
                })
            );
        },
                
        getTagQuery : function() {
            var tagQuery = "";
            
            // go through the filters are create the query for the tags ...
            if (filters) {
                // convert the filters into an associative array and then build the query...
                var filterArray = {}
                _.each(filters, function(el, index, list) {
                    var ctx = filters.at(index).get('context');
                    if (!filterArray[ctx]) {
                        filterArray[ctx] = filters.at(index).get('name');
                    } else {
                        filterArray[ctx] += ',' + filters.at(index).get('name');                    
                    };
                });
                var str = "";
                var index = 0;
                _.each(filterArray, function(val, key, list) {
                    if (index > 0) {
                        str += "&";
                    };
                    str += "context[" + index + "]=" + key + "&tags[" + index + "]=" + val;
                    index += 1;
                });
                tagQuery = str;
            }
            
            return tagQuery;
        },
        
        refreshTable : function() {
            // get the tags etc from the view and create the query
            var tagQuery = ItemApp.ItemManagement.getTagQuery();
            jQuery("#items").itemTable('tagQuery',{ 
                tagQuery : tagQuery
            });
        },
        
        init : function() {
            TabUtils.createTabControl({
                template : "#item-control-template",
                modelType : ProgramItem,
                modal_create_title : "Create Item",
                place :'#item-control',
                callback : function(mdl) {
                    // Refresh the grid - goto the page with the new item and make that the current selection
                    jQuery("#items").jqGrid('setGridParam', {
                         postData : {
                                 page_to : mdl.get('title'), // make sure that the current page contains the selected element
                                 filters : {},
                                 current_selection : mdl.id // to pass back for the selection
                             },
                    });
                    jQuery("#items").trigger("reloadGrid");
                },
            });
        },
    };
    
})(Backbone);

jQuery(document).ready(function() {
    ItemApp.start();
    ItemApp.ItemManagement.init();
    
    TabUtils.createTagCloudContent({
        collectionType : TagContextCollection,
        url : "/tags?class=ProgrammeItem",
        template : "#tag-cloud-context-layout-template",
        place : '#item-tag-cloud',
        collection_attributes : { "class" : "accordion", "id" : "item-tag-cloud-parent" },
        view_attributes : { "class" : "accordion-group" },
        tagselect : function(context, name) {
            ItemApp.ItemManagement.addFilter(context, name);
            ItemApp.ItemManagement.refreshTable();
        },
    });
    
});

</script>
