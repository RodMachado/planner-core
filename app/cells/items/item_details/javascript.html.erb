<script type="text/javascript">

ItemApp = new Backbone.Marionette.Application();

ItemApp.ItemManagement = (function(Backbone){
    var eventAggregator = AppUtils.eventAggregator;

    Picture = Backbone.RelationalModel.extend({
        schema : {
            picture : { type : 'CLImage', title : 'Pic',
                cl_image_upload_tag : '<%= cl_image_upload_tag(:picture) %>'
            }
        },
        urlRoot : '/external_images/ProgrammeItem' //           pic.url = '/external_images/ProgrammeItem/' + item_id + '/' + cardtype
    });
    PictureCollection = Backbone.Collection.extend({
        model : Picture
    });

    /*
     * 
     */
    ProgramItem = Backbone.RelationalModel.extend({
        schema : {
            title       : { type : 'Text', title : '<%= t "title" %>' },
            short_title : { type : 'Text', title : '<%= t "short-title" %>' },
            precis : { type : 'Html', title : '<%= t "item-description" %>', editorAttrs: { rows : 2, cols : 60 } },
            room_id : { type : 'Select', title : '<%= t "item-room" %>', options : <%= [[' ',' ']].concat(Room.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> }, // TODO
            start_time : { type : 'Datetime', title : '<%= t "item-start-time" %>',
                    tz_offset : <%= Time.zone.parse(SITE_CONFIG[:conference][:start_date].to_s).utc_offset/(60*60) %>,
                    picker : {
                        useSeconds : false,
                        minuteStepping : 15,
                        orientation : 'left',
                        format : "DD MMM YYYY, HH:mm",
                        defaultDate : "<%= Time.zone.parse(SITE_CONFIG[:conference][:start_date].to_s).strftime('%m/%d/%Y') %>",
                        startDate : "<%= Time.zone.parse(SITE_CONFIG[:conference][:start_date].to_s).strftime('%m/%d/%Y') %>",
                        endDate : "<%= (Time.zone.parse(SITE_CONFIG[:conference][:start_date].to_s) + ((SITE_CONFIG[:conference][:number_of_days]).to_i).days).strftime('%m/%d/%Y') %>"
                } },
            notes : { type : 'TextArea', title : '<%= t "item-notes" %>', editorAttrs: { rows : 2, cols : 60 } },
            participant_notes : { type : 'TextArea', title : '<%= t "item-notes-for-participants" %>', editorAttrs: { rows : 2, cols : 60 } },
            format_id : { type : 'Select', title : '<%= t "item-format" %>', options : <%= [[' ',' ']].concat(Format.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            setup_type_id : { type : 'Select', title : '<%= t "item-setup" %>', options : <%= [[' ',' ']].concat(SetupType.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            print : { type : 'Checkbox', title : '<%= t "item-print" %>'},
            duration : { type : 'Number', title : '<%= t "item-duration" %>', validators: ['required'] },
            minimum_people : { type : 'Number', title : '<%= t "item-min-participants" %>' },
            maximum_people : { type : 'Number', title : '<%= t "item-max-participants" %>' },
            audience_size  : { type : 'Number', title : '<%= t "item-estimated-audience-size" %>' },
            pub_reference_number : { type : 'Text', title : '<%= t "item-publication-reference" %>' },
            mobile_card_size    : { type : 'Select', title : '<%= t "mobile-card-size" %>', 
                                options : [{ val: 1, label: '<%= (t "small-feminin") %>' },{ val: 5, label: '<%= (t "medium-feminin") %>' },{ val: 10, label: '<%= (t "large-feminin") %>' }] }
        },
        // Default values used when creating a new instance
        defaults: {
            "duration":  60,
            "minimum_people": 1,
            "maximum_people": 5,
            "print": true,
            "mobile_card_size" : 1
        },
        urlRoot : '/programme_items',
        relations : [{
            type           : Backbone.HasMany,
            key            : 'external_images',
            relatedModel   : 'Picture',
            collectionType : 'PictureCollection'
        }]
    });
    
    Equipment = Backbone.Model.extend({
        schema : {
            equipment_type_id : { type : 'Select', title : '<%= t "name" %>', options : <%= [].concat(EquipmentType.find(:all).collect {|s| {'val' => s.id, 'label' => s.description} }).to_json.html_safe %> },
        },
        urlRoot : '/equipment_needs'
    });
    
    EquipmentCollection = Backbone.Collection.extend({
        model : Equipment
    });
    
    //
    TagContext = Backbone.Model.extend({
    });
    TagContextCollection = Backbone.Collection.extend({
        model : TagContext
    });
    TagFilter = Backbone.Model.extend({
        // Context name & Tag name
        // no ids cause no sync with backend (how to avoid dups? - TODO)
    });
    TagFilterCollection = Backbone.Collection.extend({
        model : TagFilter
    });


    ItemImageView = Marionette.ItemView.extend({
        template : '#item-images-template',
        events : {
            "click .large-image-create-button"  : "create_large_image",
            "click .large-image-edit-button"    : "edit_large_image",
            "click .medium-image-create-button"  : "create_medium_image",
            "click .medium-image-edit-button"    : "edit_medium_image",
        },

        initialize : function() {
            this.listenTo(this.model, 'change', this.render); // also need collection change
            // also need collection change
            eventAggregator.on("refreshImagesList", this.render, this);
        },

        create_large_image : function(event) {
            this.create_image("largecard","Create Large Image");
        },
        edit_large_image : function(event) {
            this.edit_image("largecard","Edit Large Image");
        },
        
        create_medium_image : function(event) {
            this.create_image("mediumcard","Create Medium Image");
        },
        edit_medium_image : function(event) {
            this.edit_image("mediumcard","Edit Medium Image");
        },
        
        create_image : function(cardtype, title) {
            var model = this.model;
            var pic = new Picture();
            var item_id = model.id;
            pic.url = '/external_images/ProgrammeItem/' + item_id + '/' + cardtype
            mdl = new AppUtils.ModelModal({
                        model : pic,
                        title : title,
                        refresh : function(mdl) {
                            model.set('external_images', mdl);
                        }
                    });
            mdl.render();
        },
        
        edit_image : function(cardtype, title) {
            var item_id = this.model.id;
            var model = this.model;
            var img = _.find(this.model.get('external_images').models, function(im) { return im.get('use') == cardtype });
            img.url = '/external_images/ProgrammeItem/' + item_id + '/' + cardtype
            mdl = new AppUtils.ModelModal({
                        model : img,
                        title : title,
                        refresh : function(mdl) {
                            // Need to refresh the model
                            model.fetch({async : false});
                            // eventAggregator.trigger("refreshImagesList");
                        }
                    });
            mdl.render();
        }
    });

    /*
     * 
     */
    EquipmentLayout = Backbone.Marionette.Layout.extend({ // TODO
        template: "#equipment-layout-template",
        
        regions : {
            equipmentControlRegion: "#equipment-control-div",
            equipmentRegion: "#equipment-region-div",
        },
    });
        
    /*
     * 
     */
    var tabLists = [];
    var tabContent = [];
    var filters = null;
    
    function syncModel() {
        this.fetch({async : false});
    };
    
    function clearDetails() {
        $('#selected-program-item').text("");
        
        _.invoke(tabLists, 'reset' );
        _.invoke(tabContent, 'clear' );

        eventAggregator.off("refreshTagList", syncModel);
    };
    
    function showDetails(id) {
        // alert(id);
        var data = jQuery("#items").jqGrid('getRowData', id);
        // console.debug(data['item[title]']);
        // /panels/item_mgmt?prog_item=
        $('#selected-program-item').html(data['item[title]']); // TODO
        
        var itemMdl = TabUtils.createTabContent({
            modelType : ProgramItem,
            url : "/programme_items/" + id + '.json', // TODO
            template : '#program-item-view-template',
            place :'#program-item-view',
            id : id,
            id_name : 'programme_item_id',
            editTitle : "Edit Item",
            updateCallback : function(mdl) {
                // 1. we need to refresh the row in the table (or the current table)
                // and make sure that the row is selected
                // Also need to update the title above the tabs
                $("#items").jqGrid('setGridParam', {
                    loadComplete: function(data) {
                        // alert("dd");
                        $("#items").jqGrid('setSelection', id); // when load is complete the selection is called...
                        // load complete is called every time... only want it once, so remove it after it has been used...
                        $(this).jqGrid('setGridParam', { loadComplete: function() {} });
                    }
                });
                $("#items").trigger("reloadGrid");
            },
            events : {
                'click .add-people-button' : function() {
                    model = this.model;
                    modal = new AppUtils.PanelModal({
                        title : "<%= escape_javascript(t 'add-people') %>",
                        url   : "/panels/item_mgmt?prog_item=" + model.id,
                        title : '<%= t "unsaved-data" %>',
                        closeCheck : function() {
                            var res = document.getElementById('modal-iframe').contentWindow.ItemApp.PeopleManagement.needsSaved();
                            return res;
                        },
                        closeAction : function() {
                            model.fetch();
                        }
                    });
                    modal.render();
                }
            }
        });
        tabContent.push( itemMdl );
        
        var imageView = new ItemImageView({model : itemMdl});
        imageView.render();
        $('#item-images').html(imageView.el);    
        
        equipmentLayout = new EquipmentLayout();
        equipmentLayout.render();
        $('#equipment-view').html(equipmentLayout.el);

        TabUtils.createTabControl({
            template : "#equipment-control-template",
            modelType : Equipment,
            id : id, // need to pass in the name of the id field
            id_name : 'programme_item_id',
            view_refresh_event : "equipment:refresh",
            modal_create_title : '<%= t "create-equipment-needs" %>',
            region : equipmentLayout.equipmentControlRegion
        });
        tabLists.push( TabUtils.createTabListContent({
            collectionType : EquipmentCollection,
            url : "/programme_items/"+ id + "/equipment_needs.json",
            template : "#equipment-detail-template",
            view_refresh_event : "equipment:refresh",
            region : equipmentLayout.equipmentRegion,
            newTitle : '<%= t "equipment-create-equipment" %>',
            editTitle : '<%= t "equipment-edit-equipment" %>',
        }) );
        
        tabLists.push( TabUtils.createTagListContent({
            collectionType : TagContextCollection,
            url : "/tags/"+ id + "?class=ProgrammeItem",
            tagUrl : "/tags/"+ id + "/add?class=ProgrammeItem",
            template : "#tag-context-layout-template",
            view_refresh_event : "address:refresh",
            place : '#tags-view',
            newTitle : '<%= t "create-tag" %>',
            
        }) );
        
        eventAggregator.on("refreshTagList", syncModel, itemMdl);
        
        return itemMdl;
    };
    
    var filterCol = null;

    return {
        
        ProgramItem : ProgramItem,
        
        showDetails : function(id) {
            clearDetails();
            return showDetails(id);
        },
        clearDetails : function() {
            clearDetails();
        },

        addFilter : function(context, name) {
            // TODO - add the context and tag to the TagFilterCollection
            // associate the collection with a view if not already

            if (!filters) {
                filters = new TagFilterCollection();
            }
            
            if (!filterCol) {
                filterCol = TabUtils.createTabListContent({
                    collection : filters,
                    template : "#item-filters-template",
                    place : "#item-filters",
                    collection_attributes : { "class" : "clearfix" },
                    tagremove : function(context, name) {
                        // alert("removed tag");
                        // force a refresh of the table etc
                        ItemApp.ItemManagement.refreshTable();
                    },
                    view_attributes : { "style" : "display : inline" }, // TODO - move the style to the style-sheet
                });
                
            }
            
            filters.add(
                new TagFilter({
                    context : context,
                    name : name
                })
            );
        },
                
        getTagQuery : function() {
            var tagQuery = "";
            
            // go through the filters are create the query for the tags ...
            if (filters) {
                // convert the filters into an associative array and then build the query...
                var filterArray = {}
                _.each(filters, function(el, index, list) {
                    var ctx = filters.at(index).get('context');
                    if (!filterArray[ctx]) {
                        filterArray[ctx] = filters.at(index).get('name');
                    } else {
                        filterArray[ctx] += ',' + filters.at(index).get('name');                    
                    };
                });
                var str = "";
                var index = 0;
                _.each(filterArray, function(val, key, list) {
                    if (index > 0) {
                        str += "&";
                    };
                    str += "context[" + index + "]=" + key + "&tags[" + index + "]=" + escape(val);
                    index += 1;
                });
                tagQuery = str;
            }
            
            return tagQuery;
        },
        
        refreshTable : function() {
            // get the tags etc from the view and create the query
            var tagQuery = ItemApp.ItemManagement.getTagQuery();
            jQuery("#items").itemTable('tagQuery',{ 
                tagQuery : tagQuery
            });
        },
        
        init : function() {
            // new Workspace();
            // Backbone.history.start();
            TabUtils.createTagCloudContent({
                collectionType : TagContextCollection,
                url : "/tags?class=ProgrammeItem",
                template : "#tag-cloud-context-layout-template",
                place : '#item-tag-cloud',
                collection_attributes : { "class" : "accordion", "id" : "item-tag-cloud-parent" },
                view_attributes : { "class" : "accordion-group" },
                tagselect : function(context, name) {
                    ItemApp.ItemManagement.addFilter(context, name);
                    ItemApp.ItemManagement.refreshTable();
                },
            });
        }
    };
    
})(Backbone);

jQuery(document).ready(function() {
    // moment.lang("<%= I18n.locale %>");
    ItemApp.addInitializer(ItemApp.ItemManagement.init);
    ItemApp.start();
});

</script>
