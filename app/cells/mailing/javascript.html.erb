<script type="text/javascript">
//<![CDATA[
jQuery(document).ready(function() {
    //Patch for template variables in _underscore top stop class with Rails variables in the file
    _.templateSettings = {
        interpolate : /\{\{\=(.+?)\}\}/g,
        evaluate : /\{\{(.+?)\}\}/g
    };
    
    Mailing = Backbone.Model.extend({
        urlRoot : '/mailing'
    });
    
    MailTemplate = Backbone.Model.extend({
    });

    Person = Backbone.Model.extend({
    });
    
    PersonMailing = Backbone.Model.extend({
        // Mailing and Person
        // url : '/person_mailing_assignments'
        urlRoot : '/person_mailing_assignments'
    });
    
    MailingCollection = Backbone.Collection.extend({
        model : Mailing,
        url : '/mailings/list'
    });
    
    MailTemplateCollection = Backbone.Collection.extend({
        model : MailTemplate,
        url : '/mailings/listMailTemplates'
    });
    
    SelectedPeople = Backbone.Collection.extend({
        model: Person,
    });
    
    SelectedMailing = Backbone.Collection.extend({
        model: PersonMailing,
    });
    
    PersonMailingCollection = Backbone.Collection.extend({
        model: PersonMailing,
        url : '/person_mailing_assignments',
        comparator : function(obj1, obj2) {
            //alert(person.get("person").last_name); //.get("last_name"));
            //alert(obj1.get("person").last_name.localeCompare(obj2.get("person").last_name));
            var c = obj1.get("person").last_name.localeCompare(obj2.get("person").last_name);
            
            if (c < 0) {
                return -1;
            };
            if (c > 0 ){
                return 1;
            };
            
            return 0;
            
            //return person.get("person").last_name;
        }
    });
    
    PeopleCollection = Backbone.Paginator.requestPager.extend({
        model: Person,
        mailing_id : 1,
        paginator_core: {
            type: 'POST',
            // the URL (or base URL) for the service
            url: '/participants/list.json',
        },
        paginator_ui: {
            // the lowest page index your API allows to be accessed
            firstPage: 1,
        
            // which page should the paginator start from 
            // (also, the actual page the paginator is on)
            currentPage: 1,
            
            // how many items per page should be shown
            perPage: 20,
            
            // a default number of total pages to query in case the API or 
            // service you are using does not support providing the total 
            // number of pages for us.
            // 10 as a default in case your service doesn't return the total
            totalPages: 10
        },
        server_api: {
            // number of items to return per request/page
            'rows' : function() { return this.perPage },
            // how many results the request should skip ahead to
            'page' : function() { return this.currentPage },
            
            'sidx' : 'people.last_name',
            'sord' : 'asc',
            // 'filters' : function() {
                // return '{"groupOp":"AND","rules":[{"field":"mailing_number","op":"eq","data":"23"}]}'; // ,{"field":"mailing_id","op":"ne","data":"1"}
            // },
            'mailing_id' : function() {
                // alert(this.mailing_id);
                return this.mailing_id; // TODO - change to use the mailing id 
            },
            'scheduled' : 'true'
            //'{"groupOp":"AND","rules":[{"field":"mailing_number","op":"eq","data":"23"}]}' // TODO - need to add mechanism to set the op for the mailing etc
        },
        
        parse: function (response) {
            this.totalRecords = response.totalRecords;
            this.totalPages = Math.ceil(response.totalRecords / this.perPage);
            
            return response.data;
        }
    });
    
    ParticipantView = Backbone.View.extend({
        tagName : 'li',
        template: _.template($('#person-template').html()),
        className : 'ui-widget-content',
        
        events: {
            'click .person-row' : 'selectPerson'
        },
        
        selectPerson : function(ev) {
            // Add the model to the list of selected or remove it as per 
            if ($(ev.currentTarget).hasClass('ui-selected')) {
                $(ev.currentTarget).removeClass('ui-selected');
                if (this.options.selected) {
                    this.options.selected.remove(this.model, {silent : true});
                }
            } else {
                $(ev.currentTarget).addClass('ui-selected');
                if (this.options.selected) {
                    this.options.selected.add(this.model);
                }
            }
        },
        
        initialize: function() {
            this.model.bind('change', this.render, this);
            this.model.bind('remove', this.remove, this);
        },
        
        render : function () {
            // alert(this.model.get('person'));
            if (this.model.get('person')) {
                this.$el.html(this.template(this.model.toJSON()));
            } else {
                // alert(JSON.stringify(this.model.get('person')));
                this.$el.html(this.template({
                    person : this.model.toJSON()
                }));
            }
            return this;
        }
    });

    ListControlView = Backbone.View.extend({
        
        el : '#mailing-people-controls',
        
        template : _.template($('#list-control-template').html()),
        
        events : {
            'click button.add' : 'addItems',
            'click button.remove' : 'removeItems',
        },
        
        addItems : function() {
            this.options.evAggregator.trigger("addToMailing");
        },
        
        removeItems : function() {
            // alert("remove");
            // TODO - need to trigger remove from mailing
            this.options.evAggregator.trigger("removeFromMailing");
        },
        
        initialize: function() {
            this.render();
        },
        
        render : function () {
            this.$el.html(this.template());
            return this;
        }
    });

    ParticipantsMailingView = Backbone.View.extend({
        el : '#current-mailing-control',
        
        template : _.template($('#current-mailing-control-template').html()),

        events: {
            'click button.preview': 'preview',
        },
        
        initialize : function() {
            this.selected = new SelectedMailing(); 
            this.options.evAggregator.bind("removeFromMailing", this.removeFromMailing, this);
        },
        
        preview : function(e) {
            alert('preview');
        },
        
        reinit : function() {
            $('#current-mailing-people').html('');
            this.selected.reset();
        },
        
        render : function() {
            this.$el.html(this.template());
            this.refreshList();

            return this;
        },
        
        removeFromMailing : function() {
            //
            if (this.selected.length > 0) {
                // alert('remove item' + this.selected); // test
                _.each(this.selected.models, function(el, idx, list) {
                    // alert(el.id);
                    el.destroy();
                });
                
                // this.selected.reset();
    
                this.refreshList(); //
                this.options.evAggregator.trigger("refreshLists");            
            }
        },
        
        refreshList : function() {
            var me = this;
            $('#current-mailing-people').html('');
            _.each(this.model.models, function(el, idx, list) {
                me.addOne(el);
            });
            this.selected.reset();
        },
        
        addSelected : function(selected, mailing) {
            // Sending this to the server and forcing a refresh of the collection.... 
                if (selected.length > 0) {
                    var col = this.model;
                    _.each(selected.models, function(el, idx, list) {
                        // i.e. create a person to mailing assignment with the selected person and the current mailing
                        var m = new PersonMailing();
                        m.save({
                            person : el,
                            mailing : mailing
                        }, {
                            // wait : true,
                            async : false,
                            success : function(m) {
                                col.add(m);
                            }
                        });
                    });

                    // Now we need to refresh the collection
                    cv = this;
                    this.model.fetch({
                        data : 'mailing_id=' + mailing.id,
                        error : function(model, response) {
                            alert("ERROR: unable to get the scheduled participants from the server");
                        },
                        success : function() {
                            cv.refreshList();
                        }
                    });
                }
        }, 
        
        /*
         * {
         *     "mailing":{"scheduled":true,"id":2,"testrun":false,"created_at":"2013-06-07T21:41:46-04:00","lock_version":4,"mail_template_id":5,"updated_at":"2013-06-08T14:06:20-04:00",
         * "mailing_number":45},
         * "id":161,"created_at":"2013-06-16T22:34:00-04:00",
         * "person":{"id":2608,"invitestatus_id":4,"invitation_category_id":3,"created_at":"2013-05-05T21:04:50-04:00",
         * "lock_version":0,"last_name":"Abbas","updated_at":"2013-05-05T21:04:50-04:00","acceptance_status_id":6,"suffix":"","mailing_number":23,"language":"",
         * "first_name":"Ibraheem","comments":null},"mailing_id":2,"lock_version":0,"updated_at":"2013-06-16T22:34:00-04:00","person_id":2608}
         * 
         */
        addOne : function ( item ) {
            // alert(JSON.stringify(item.toJSON()));
            // alert(item['person']);
            var view = new ParticipantView({ // TODO add model here  
                model : item,
                selected:this.selected,
                // evAggregator : eventAggregator
            });
            $('#current-mailing-people').append(view.render().el);
        },

    });
    
    ScheduledParticipantsPagerView = Backbone.View.extend({
        el : '#mailing-people-pager',
        
        template : _.template($('#people-pager-template').html()),
        
        events: {
            'click button.next': 'nextResultPage',
            'click button.previous': 'previousResultPage',
            'click button.last': 'gotoLast',
            'click button.first': 'gotoFirst',
        },
                
        nextResultPage : function(e) {
            e.preventDefault();
            this.model.requestNextPage();
        },
        previousResultPage : function(e) {
            e.preventDefault();
            this.model.requestPreviousPage();
        },
        gotoLast : function(e) {
            e.preventDefault();
            this.model.goTo(this.model.information.lastPage);
        },
        gotoFirst : function(e) {
            e.preventDefault();
            this.model.goTo(this.model.information.firstPage);
        },
        
        refreshCurrent : function() {
            // alert('current'); // FIX
            var n = this.model.currentPage;
            $('#mailing-people').html('');
            this.model.reset();
            this.model.goTo(n);
        },
        
        render : function() {
            this.$el.html(this.template(this.model.info()));
            return this;
        },

        initialize : function() {
            this.model.on('add', this.addOne, this);
            this.model.on('all', this.render, this);
            
            this.options.evAggregator.bind("addToMailing", this.refreshCurrent, this);
            this.options.evAggregator.bind("refreshLists", this.refreshCurrent, this);//
        },
        
        reinit : function() {
            // Clear the view content
            $('#mailing-people').html('');
            this.model.on('add', this.addOne, this);
            this.model.on('all', this.render, this);
            
            this.options.evAggregator.bind("addToMailing", this.refreshCurrent, this);
            this.options.evAggregator.bind("refreshLists", this.refreshCurrent, this);//
        },
        
        addOne : function ( item ) {
            var view = new ParticipantView({
                model:item, 
                selected:this.options.selected
            });

            $('#mailing-people').append(view.render().el);
        },
        
        // moveSelectedToMailing : function() {
            // // TODO - add the selected to the mailing and clear the selected list...
        // }
    });

    CurrentMailing = Backbone.View.extend({
        el : '#current-mailing-configs',
        
        template : _.template($('#mailing-setup-template').html()),
        
        events : {
            'change .mailing-scheduled' : 'setScheduled',
            'change .mailing-test-run' : 'setTestRun',
            'click #save-mailing-button' : 'saveMailing',
        },
        
        setScheduled : function(ev) {
            this.options.model.set('scheduled', !this.options.model.get('scheduled') );
        },
        
        setTestRun : function(ev) {
            this.options.model.set('testrun', !this.options.model.get('testrun') );
            this.options.model.save();
        },
        
        saveMailing : function(ev) {
            this.options.model.save();
        },
        
        render : function() {
            // alert(this.options.model.toJSON());
            this.$el.html(this.template(
                    this.options.model.toJSON()
                ));
            return this;
        },

        initialize : function() {
            // this.listenTo(this.options.model, 'add', this.render);
            // this.options.evAggregator.bind("refreshLists", this.refreshList, this);
            this.render();
        },
        
    });
    
    NewMailingConfigView = Backbone.View.extend({
        tagName : 'div',
        className : 'new-mailing-config-dialog',
        id : 'new-mailing-config-dialog',
        
        template : _.template($('#mailing-create-template').html()),
        
        render : function() {
            // alert(this.options.templates); //.get("templates"));
            var obj = this.$el.html(this.template({
                templates : this.options.templates,
                // selected : this.selected
            }));
            this.dialog = obj.dialog({
                title : 'Create Mailing Config',
                modal : true,
                // width: 600,
            });
        },
        
        events : {
            'change .configID' : 'selectTemplate',
            'blur .mailing-number' : 'setMailing',
            'click #close-button' : 'close',
            'click #create-button' : 'createMailingConfig',
        },

        setMailing : function(ev) {
            this.mailing = $(ev.currentTarget).val();
        },
        
        selectTemplate : function(ev) {
            this.template = $(ev.currentTarget).val();
        },
        
        close : function(ev) {
            this.dialog.dialog('close');
        },
        
        createMailingConfig : function(ev) {
            this.dialog.dialog('close');
            // alert("Create a mailing config: " + this.mailing);
            config = new Mailing({
                mailing_number : this.mailing,
                mail_template_id : this.template,
            });
            config.save();
            // refresh the mailing config view (model to be updated)
            this.options.evAggregator.trigger("refreshLists");
        },

        initialize : function() {
            this.render();
        },
    });
    
    MailingConfigView = Backbone.View.extend({
        el : '#mailing-configs-control',
        
        template : _.template($('#mailing-config-template').html()),

        events : {
            "click .create-button" : "newMailing",
            'change #mailingID' : 'showCurrentMailing',
            
        },
        
        showCurrentMailing : function(ev) {
            var selectedMailing = $(ev.currentTarget).val();
            var mdl = this.options.model.get(selectedMailing);
            this.currentMailingCfg = mdl;
            if (this.currentMailing) {
                this.currentMailing.options.model = mdl;
                this.currentMailing.render();
            } else {
                this.currentMailing = new CurrentMailing({
                    model : mdl
                });
            };
            
            this.showScheduledParticipants();
            this.showCurrentMailingParticipants();
        },
        
        showScheduledParticipants : function() {
            // TODO - get list of participants that have not been added to the mailing and show them 
            
            var mid = this.currentMailingCfg;
            var participants = new PeopleCollection();
            participants.mailing_id = mid.id; // TODO - get rid of old collection?
            // TODO - need to get the scehduled people i.e. those added to program items (even if not published)
            // TODO - need to filter for those added to the mailing
            // TODO - then update the view accordingly
            if (!this.scheduledParticipants) {
                this.scheduledParticipants = new ScheduledParticipantsPagerView({ 
                    model : participants,
                    evAggregator : this.options.evAggregator,
                    selected : this.selected
                });
            } else {
                // currentPage = this.scheduledParticipants.model.currentPage;
                this.scheduledParticipants.model = participants;
                this.scheduledParticipants.reinit();
            };
            
            if (!this.ctl) {
                this.ctl = new ListControlView({
                    evAggregator : this.options.evAggregator
                });
            }
                    
            var sv = this.scheduledParticipants;
            participants.fetch({
                error : function(model, response) {
                    alert("ERROR: unable to get the participants from the server");  
                },
                success : function(model) {
                    sv.render();
                }
            });
        },
        
        showCurrentMailingParticipants : function() {
            // TODO - get the list of participants that have been added to selected mailing and displat them
            var p = new PersonMailingCollection(); // CHANGE
            
            if (this.participantMailing) {
                // this.participantMailing.render();
                this.participantMailing.model = p;
                this.participantMailing.reinit();
            } else {
                this.participantMailing = new ParticipantsMailingView({
                    model : p,
                    evAggregator : this.options.evAggregator
                });
            }
            
            // TODO - get the scheduled participants from the server
            var sv = this.participantMailing;
            var mid = this.currentMailingCfg;
            p.fetch({
                data : 'mailing_id=' + mid.id,
                error : function(model, response) {
                    alert("ERROR: unable to get the scheduled participants from the server");  
                },
                success : function(model) {
                    sv.render();
                }
            });
        },
        
        newMailing : function() {
            // Get the name of the possible templates
            var templates = new MailTemplateCollection();
            var tt = this.options.evAggregator;
            templates.fetch({
                success : function(col) {
                    // Then show the form
                    nq = new NewMailingConfigView({
                        templates : col,
                        evAggregator : tt
                    });
                }
            });
        },
        
        render : function() {
            this.$el.html(this.template({
                col : this.options.model
                }));
            return this;
        },
        
        initialize : function() {
            // Get the model
            this.listenTo(this.options.model, 'add', this.render);
            
            this.selected = new SelectedPeople(); //
            
            this.options.evAggregator.bind("addToMailing", this.addToMailing, this);
            this.options.evAggregator.bind("refreshLists", this.refreshList, this);
        },
        
        refreshList : function() {
            this.options.model.fetch();
            this.selected.reset();
        },
        
        addToMailing : function() {
            this.participantMailing.addSelected(this.selected, this.currentMailingCfg); // CHECK
            this.selected.reset();
        },

    });
    
    var eventAggregator = _.extend({}, Backbone.Events);
    var c = new MailingCollection();
    var app = new MailingConfigView({
        model : c,
        evAggregator : eventAggregator
    });
    c.fetch({
        success : function(res) {
            app.render();
        }
    });
    
    Backbone.history.start();
}); 
//]]>
</script>
