<script type="text/javascript">
/*
 * 
 */
ScheduleApp = new Backbone.Marionette.Application();
ScheduleApp.ItemManagement = (function(Backbone){
    
    var eventAggregator = new Backbone.Wreqr.EventAggregator();
    
    /*
     * 
     */
    GridItem = Backbone.Model.extend({
    });
    
    // 
    Conflict = Backbone.RelationalModel.extend({});
    ConflictCollection = Backbone.Collection.extend({
        model : Conflict
    });
    
    Conflicts = Backbone.RelationalModel.extend({
        relations : [{
            type           : Backbone.HasMany,
            key            : 'schedule',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'room',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'excluded_item',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'excluded_time',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'availability',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }, {
            type           : Backbone.HasMany,
            key            : 'back_to_back',
            relatedModel   : 'Conflict',
            collectionType : 'ConflictCollection',
            // collectionKey  : false, // cause there is no reference from the collection back to the containiing model
        }]
    });
    
    Day = Backbone.Model.extend({
        defaults : {
            'currentDay' : 0
        }
    });
    
    /*
     * 
     */
    ConflictLayout = Backbone.Marionette.Layout.extend({
        template: "#conflict-layout-template",
        
        regions : {
            scheduleRegion     : "#schedule-region-div",
            roomRegion         : "#room-region-div",
            excludedItemRegion : "#excluded-item-region-div",
            excludedTimeRegion : "#excluded-time-region-div",
            availabilityRegion : "#availability-region-div",
            backToBackRegion   : "#back-to-back-region-div",
        },
    });
    
    ConflictView = Marionette.ItemView.extend({
        events: {
            "click .conflict": "selectConflict",
        },
        
        selectConflict : function(ev) {
            console.debug(this.model.get('item_name'));
            // TODO - scroll to the problem item
            room_name = this.model.get('room_name');
            time = this.model.get('item_start');
            item_id = this.model.get('item_id'); // g id
            
            DailyGrid.scrollTo(room_name, time);
        }
    });
    
    ConflictCollectionView = Backbone.Marionette.CollectionView.extend({
        itemView : ConflictView,
        
        // build the view using a dynamic template based on itemViewTemplate
        buildItemView: function(item, ItemViewType, itemViewOptions){
            var options = _.extend({
                model    : item,
                template : this.options.itemViewTemplate
                }, itemViewOptions);
            
            var view = new ItemViewType(options);

            return view;
        },
    });
    
    /*
     * 
     */
    GridDayControlView = Marionette.ItemView.extend({
        el : '#grid-day-control-view',
        template : '#grid-day-control-view-template',
        
        events : {
            "click .prev-day"   : "prevDay",
            "click .next-day"    : "nextDay",
        },
        
        initialize : function() {
            eventAggregator.on("refreshConflicts", this.refreshConflicts, this);
        },
        
        refreshConflicts : function() {
            day = this.model.get('currentDay');
            loadConflicts(day);
        },

        prevDay : function() {
            day = this.model.get('currentDay');
            if (day > 0) {
                day -= 1;
                this.model.set('currentDay', day);
                // this.model.set('currentDate', Time.zone.parse(SITE_CONFIG[:conference][:start_date]) + day.days);
                this.render();
                loadGrid(day);
            }
        },
        
        nextDay : function() {
            day = this.model.get('currentDay');
            if (day < (<%= SITE_CONFIG[:conference][:number_of_days] %> -1)) {
                day += 1;
                this.model.set('currentDay', day);
                this.render();
                loadGrid(day);
            }
        }
    });
    
    /*
     * 
     */
    GridView = Marionette.ItemView.extend({
        el : '#grid-view',
        template : '#grid-view-template',
        
        initialize : function() {
        },
        
        onRender : function() {
            var thisView = this;
            var _containerElem = this.$el.find("#program-grid")[0];
            _day = this.options.day;
            var assignments = this.model;
            
            DailyGrid.paint(_containerElem, assignments, $("#program-grid").width());
            
            // when an item is droped on the grid we need to
            // 1. create a new assignment (need the room and the time)
            // 1.a Save the new item on the server
            // 2. Add the item as a visual element to the grid
            // 3. Refresh the list of items on the left (i.e. remove dropped item from list)
            this.$el.droppable({
                drop: function(event, ui) {
                    console.debug("Dropped");
                    setDropped( ui.draggable.find("div").attr('itemid') );
                }
            });
        },

    });
    
    /*
     * 
     */
    var _gridView = null;
    var _itemId = null;
    var _day = null;
    
    function setDropped(itemId) {
        _itemId = itemId;
    };
    
    function getDropped() {
        var it = _itemId;
        _itemId = null;
        return it;
    };
    
    /*
     * 
     */
    function removeAssignment(_itemid) {
        console.debug("Remove assignment " + _itemid);

        $.ajax({
            type: 'POST',
            url: "/program_planner/removeItem", // TODO - fix domain and sub-site
            data: {
                itemid : _itemid,
            },
            success: function(response){
                // And we reload the list of items so that the dropped one is removed
                $("#items").trigger("reloadGrid");
                eventAggregator.trigger("refreshConflicts");
            },
            error : function(model, response) {
                alertMessage("Error communicating with backend");
            }
        });
        
        return true;
    };
    
    /*
     * Create a new assignment on the server 
     */
    function addAssignment() {
        var roomAndTime = DailyGrid.getCurrentRoomAndTime();
        var itemId = getDropped();
        
        if (itemId && roomAndTime && (typeof roomAndTime[0] != 'undefined')) {
            moveAssignment(itemId, roomAndTime[0].id, _day, roomAndTime[1], true);
        };
    };
    
    /*
     * 
     */
    function moveAssignment(itemId, roomId, day, time, addDisplay) {
        var timeStr = moment(time).format("H:mm");
        var assignments = _gridView.model;
        
            $.ajax({
                type: 'POST',
                url: "/program_planner/addItem.json", // TODO - fix domain and sub-site
                data: {
                    day    : day,
                    itemid : itemId,
                    roomid : roomId,
                    time   : timeStr
                },
                success: function(response){
                    // Once the item is created add it to the grid ...
                    // create the element in the grid
                    if (addDisplay) {
                        var idx = 0;
                        var rooms = assignments.get('rooms');
                                
                        for (idx = 0; idx < rooms.length; idx++) {
                            if (rooms[idx].id == roomId) {
                                break;
                            }
                        };

                        if (idx < rooms.length) {
                            DailyGrid.createItem(response, idx);
                        };
                    };
                    
                    // And we reload the list of items so that the dropped one is removed
                    $("#items").trigger("reloadGrid");
                    eventAggregator.trigger("refreshConflicts");
                },
                error : function(model, response) {
                    alertMessage("Error communicating with backend");
                },
            });
    };
    
    /*
     * Given the day of the conference render the grid (SVG) for that day
     */
    function loadGrid(day) {
            var grid = new GridItem();
            grid.url = "/program_planner/assignments.json?day=" + day;
            grid.fetch({
                error : function(model, response) {
                    alertMessage("Error communicating with backend");
                },
                success : function(_grid) {
                    // if there was already a grid there we need to get rid of it.... check that this is the case
                    if (_gridView) {
                        DailyGrid.clean();
                    };
                    
                    _gridView = new GridView({
                        model : _grid,
                        day : day
                    });
                    _gridView.render();
                    
                    loadConflicts(day);
                }
            });
    };
    
    var conflictContent = [];

    function clearConflicts() {
        _.invoke(conflictContent, 'clear' );
    };

    /*
     * Create collection and view for the conflict(s)
     */
    function clearConflictHighlights(color) {
        // Clear the conflict highlights
        $(".conflict-item-" +color).each(function() {
            var cl = $(this).attr('class');

            cl = cl.replace('conflict-item-' + color,"");
            
            $(this).attr('class', cl);
        });
    };
    
    function createConflictCollectionView(collection, viewTemplate, region, color) {
        var collectionView = new ConflictCollectionView({
            collection : collection,
            itemViewTemplate : viewTemplate,
        });
        region.show(collectionView);
        
        
        // Put in the conflict highlights
        _.each(collection.models, function(vv) {
            var id = vv.get('item_id');
            var cl = $("#" + id + " .prog-item-rect").attr('class');
            if (cl.indexOf("conflict-item") == -1) {
                $("#" + id + " .prog-item-rect").attr('class', cl + " conflict-item-" + color);
            }
        });
    };
    
    /*
     * 
     */
    function loadConflicts(day) {
        conflictLayout = new ConflictLayout();
        conflictLayout.render();
        $('#conflict-view').html(conflictLayout.el);

        // Render the conflicts for this day
        conflicts = new Conflicts();
        conflicts.fetch({
            url : "/program_planner/getConflicts.json?day=" + day, // TODO - fix domain and sub-site
            success : function(obj) {
                // Create the views...
                clearConflictHighlights('red');
                clearConflictHighlights('blue');
                clearConflictHighlights('magenta');
                createConflictCollectionView(obj.get('schedule'), "#schedule-view-template",conflictLayout.scheduleRegion, 'red');
                createConflictCollectionView(obj.get('room'), "#room-view-template",conflictLayout.roomRegion, 'red');
                createConflictCollectionView(obj.get('excluded_item'), "#excluded-item-view-template",conflictLayout.excludedItemRegion, 'magenta');
                createConflictCollectionView(obj.get('excluded_time'), "#excluded-time-view-template",conflictLayout.excludedTimeRegion, 'magenta');
                createConflictCollectionView(obj.get('availability'), "#availability-view-template",conflictLayout.availabilityRegion, 'magenta');
                createConflictCollectionView(obj.get('back_to_back'), "#back-to-back-view-template",conflictLayout.backToBackRegion, 'blue');
                // TODO - add mechanism to colour the items in the grid based on the conflicts
            } 
        });

    };
    
    /*
     * The 'public' methods
     */
    return {
        init : function() {
            var dayControl = new GridDayControlView({
                model : new Day()
            });
            dayControl.render();
            
            // get the data for the first day
            loadGrid(0);
        },
        
        onItemLoad : function() {
            // make the cells of the item list draggable
            $('#items').find( ".ui-draggable" ).draggable({
                revert : true,     // return to origin if not dropped on droppable area
                helper : "clone"   // clone for visual effect
            });
        },
        
        addAssignment : function() {
            addAssignment();
        },
        
        moveAssignment : function(itemId, roomId, day, time) {
            moveAssignment(itemId, roomId, day, time, false);
        },
        
        removeAssignment : function(id) {
            return removeAssignment(id);
        }
    }
    
})(Backbone);

jQuery(document).ready(function() {
    ScheduleApp.start();
    ScheduleApp.ItemManagement.init();
});

</script>
