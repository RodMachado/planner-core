<script type="text/javascript">

RoomApp = new Backbone.Marionette.Application();

RoomApp.RoomManagement = (function(Backbone){
    
    Room = Backbone.Model.extend({
        schema : {
            name : { type : 'Text', title : '<%= t "Name" %>' },
            purpose : { type : 'Text', title : '<%= t "Purpose" %>' },
            comment : { type : 'Text', title : '<%= t "Comment" %>' }
        },
        urlRoot : '/rooms'
    });

    RoomSetup = Backbone.Model.extend({
        schema : {
            setup_type_id : { type : 'Select', title : '<%= t "Setup Type" %>', options : <%= SetupType.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }.to_json.html_safe %> },
            capacity : { type : 'Number', title : '<%= t "Capacity" %>' },
            isdefault : { type : 'Checkbox', title : '<%= t "Default" %>' }, // This needs to be calculated
        },
        urlRoot : '/room_setups'
    });

    RoomSetupCollection = Backbone.Collection.extend({
        model : RoomSetup
    });
    
    RoomSetupLayout = Backbone.Marionette.Layout.extend({ // TODO
        template: "#room-setup-layout-template",
        
        regions : {
            roomSetupControlRegion: "#room-setup-control-div",
            roomSetupRegion: "#room-setup-region-div",
        },
    });
    
    var tabLists = [];
    var tabControls = [];
    
    function clearDetails() {
        _.invoke(tabLists, 'reset' );
        _.invoke(tabControls, 'close' );
    };
    
    function showSetups(id) {
        // need to get the room
        var theRoom = new Room({ id : id});
        theRoom.fetch({ sync : true });
        
        roomSetupLayout = new RoomSetupLayout();
        roomSetupLayout.render();
        $('#room-setup-view').html(roomSetupLayout.el);
         tabControls.push( TabUtils.createTabControl({
            template : "#room-setup-control-template",
            modelType : RoomSetup,
            id : id, // need to pass in the name of the id field
            id_name : 'room_id',
            view_refresh_event : "room-setup:refresh",
            modal_create_title : '<%= t "Create Room Setup" %>',
            region : roomSetupLayout.roomSetupControlRegion,
            callback : function(mdl) {
                $("#rooms").jqGrid('setGridParam', {
                    loadComplete: function(data) {
                        $("#rooms").jqGrid('setSelection', id); // when load is complete the selection is called...
                        // load complete is called every time... only want it once, so remove it after it has been used...
                        $("#rooms").jqGrid('setGridParam', { loadComplete: function() {} });
                    }
                });
                $("#rooms").trigger("reloadGrid");
            }
        }) );
        
        tabLists.push( TabUtils.createTabListContent({
            collectionType : RoomSetupCollection,
            url : "/room_setups/list.json?room_id="+ id,
            template : "#room-setup-template",
            view_refresh_event : "room-setup:refresh",
            region : roomSetupLayout.roomSetupRegion,
            newTitle : '<%= t "Create Room Setup" %>',
            editTitle : '<%= t "Edit Room Setup" %>',
            updateCallback : function(mdl) {
                $("#rooms").jqGrid('setGridParam', {
                    loadComplete: function(data) {
                        $("#rooms").jqGrid('setSelection', id); // when load is complete the selection is called...
                        // load complete is called every time... only want it once, so remove it after it has been used...
                        $("#rooms").jqGrid('setGridParam', { loadComplete: function() {} });
                    }
                });
                $("#rooms").trigger("reloadGrid");
            }
        }) );
        
        return theRoom;
    };
    
    return {
        Room : Room,
        
        clearDetails : function() {
            clearDetails();
        },
        
        selectRoom : function(id) {
            clearDetails();
            // set the URL for the rooms and get it to refresh
            $("#rooms").roomTable("getRoomForVenue", id);
        },
        
        showSetups : function(id) {
            return showSetups(id);
        }
    }

})(Backbone);

</script>
