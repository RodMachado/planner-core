<script type="text/javascript">

ReportApp = new Backbone.Marionette.Application();

ReportApp.ReportManagement = (function(Backbone){
    
    function arrayToString(cellvalue) {
        if (cellvalue) {
            return cellvalue.join(",<br/>");
        } else {
            return '';
        }
    };
    
    function arrayToStringSingleLine(cellvalue) {
        if (cellvalue) {
            return cellvalue.join(", ");
        } else {
            return '';
        }
    };
    
    ResultSet = Backbone.RelationalModel.extend({
        relations : [{
            type : Backbone.HasMany,
            key : 'rowdata',
            relatedModel : 'ResultRow',
            collectionType : 'ResultRowCollection',
        }],
    });

    var PanelsWithPanelistsForm = Backbone.Form.extend({
        schema : {
            modified_since  : { type : 'Date' },
            sort_by : { type : 'Select', options : [{ val: 'time', label: 'Date/Time' }, { val: 'room', label: 'Room' }, { val: 'title', label: 'Title' }] },
            scheduled       : { type : 'Checkbox'}, // Include scheduled panels only
            // description     : { type : 'Checkbox'}, // Include item descriptions
            format_id       : { type : 'Select', title : '<%= t "format" %>', options : <%= [{'val' => -1, 'label' => 'All'}].concat(Format.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            fewer_than      : { type : 'Number'},
            more_than       : { type : 'Number'}
        },
        
        data : {
            sort_by : 'time',
            modified_since : new Date('January 1, 2000')
        }
        
    });
    
    var PanelistsWithPanelsForm = Backbone.Form.extend({
        schema : {
            scheduled   : { type : 'Checkbox'}, // Include scheduled panelists only
            reserved    : { type : 'Checkbox'},
            forprint    : { type : 'Checkbox'}
        },
        
        data : {
        }
    });
    
    var TagsByContextForm = Backbone.Form.extend({
        schema : {
            context : { type : 'Select', 
                options : <%= TagContext.all(:order => 'name').collect {|s| {'val' => s.name, 'label' => s.name} }.to_json.html_safe %> },
        },
        
        data : {
        }
    });
    
    var PeopleByTagForm = Backbone.Form.extend({
        schema : {
        },
        
        data : {
        }
    });
    
    var PeopleByTagColModel = [
                    {name: 'context', jsonmap: "context", width: 100},
                    {name: 'tag', jsonmap: "tag", width: 100},
                    {name: 'people', jsonmap: "people", formatter: arrayToStringSingleLine}
    ];
    
    var TagsByContextColModel = [
                    {name: 'Name', jsonmap: "name", width: 100},
                    {name: 'Tags', jsonmap: "tags", width: 300, formatter: arrayToStringSingleLine}
    ];
    
    var PanelistsWithPanelsColModel = [
                    {name: 'Name', jsonmap: "name", width: 130},
                    {name: 'Status', jsonmap: "acceptance_status", width: 60},
                    {name:'Items', jsonmap: "items", width: 500, formatter: arrayToString},
    ];
    
    var PanelsWithPanelistsColModel = [ 
                    {name: 'Ref', jsonmap: 'pub_reference_number', width: 100},
                    {name:'Title', jsonmap: "title", width: 500},
                    {name:'Venue', jsonmap: "venue_name"},
                    {name:'Room', jsonmap: "room_name"},
                    {name: 'Format', jsonmap: 'format'},
                    {name: 'Area(s)', jsonmap: 'context', formatter: arrayToString},
                    {name: 'Start Time', jsonmap: 'start_time'},
                    {name: 'End Time', jsonmap: 'end_time'},
                    {name: 'Min People', jsonmap: 'minimum_people'},
                    {name: 'Max People', jsonmap: 'maximum_people'},
                    {name: 'Equipment', jsonmap: 'equipment',width: 300, formatter: arrayToString},
                    {name: 'Moderator(s)', jsonmap: 'moderators',width: 300, formatter: arrayToString },
                    {name: 'Participants', jsonmap: 'participants',width: 300, formatter: arrayToString }, 
                    {name: 'Reserve', jsonmap: 'reserve',width: 300,formatter: arrayToString},
                    {name: 'Invisible', jsonmap: 'invisible',width: 300, formatter: arrayToString},
                ];
    
    ResultsView = Backbone.View.extend({
        // tagName : 'div',

        initialize : function() {
            this.template = _.template($('#query-results-template').html());
        },
        
        render : function() {
            this.$el.html($(this.template()));
            $('#report-results-area').html(this.$el);
            
            this.grid = $('.result-table').jqGrid({
            // this.grid = this.$el.find('.result-table').jqGrid({
                colModel : this.options.colModel,
                cmTemplate: {sortable:false, cellattr: function (rowId, tv, rawObject, cm, rdata) { return 'style="white-space: pre-wrap;"' }},
                datatype: 'jsonstring',
                datastr: this.options.resultsCollection.toJSON(),
                jsonReader :{
                    repeatitems : false,
                    page: "currpage",
                    records: "totalrecords",
                    root : "rowdata",
                    total: "totalpages",
                    id : "id",
                },
                viewrecords: true,
                height: "auto",
                autowidth: true,
                ignoreCase: true,
                gridview: true,
                pager : '#result-pager',
                caption: 'Results',
                rowList:[10,20,50,100],
                rowNum:50,
        // grouping:true,
        // groupingView : {
            // groupField : ['context'],
            // groupColumnShow : [false],
            // groupText : ['<b>{0}</b>'],
            // groupCollapse : true,
            // // groupSummary : [true, true]
        // },
                });

            var grid = this.grid;
            jQuery(window).bind('resize', function() {
                var width = grid.parents('.ui-jqgrid').parent().width();
                grid.setGridWidth(width);
                grid.parents('.ui-jqgrid').css("width", width+2);
            }).trigger('resize');
            
            return this;
        }

    });
    
    var reportRegion = new Backbone.Marionette.Region({
        el: "#report-form-area"
    });
    var resultRegion = new Backbone.Marionette.Region({
        el: "#report-results-area"
    });

    var ReportView = Marionette.ItemView.extend({
        events: {
            "click .report-submit-button" : "submit",
            "click .report-csv-button" : "submitCSV"
        },
        
        initialize : function() {
            this.template = _.template($('#report-template').html());
        },
        
        render : function() {
            this.$el.html($(this.template()));
            
            this.form = new this.options.form({}).render();
            
            this.$el.find(".report-body").html(this.form.el);
        },
        
        submitCSV : function() {
            var data = this.form.getValue();
            
            $.download(this.options.endPoint + '.csv', data );
        },
        
        // TODO - we want XML and CSV exports as well
        submit : function() {
            // Gather the data from the form and send it to the back end
            var data = this.form.getValue();
            var colModel = this.options.colModel;

            resultSet = new ResultSet();
            resultSet.fetch({
                url : this.options.endPoint + '.json',
                type : 'POST',
                data : data,
                error : function(model, response) {
                  alertMessage("ERROR: unable to get the result from the server");
                },
                success : function(model) {
                        resultsView = new ResultsView({
                                    colModel : colModel,
                                    resultsCollection : model
                        });
                        resultsView.render();
                        
                        // resultRegion.show(new ResultsView({
                                    // colModel : colModel,
                                    // resultsCollection : model
                                // }));                                        
                }
            })
        }
    });
    
    var Workspace = Backbone.Router.extend({

        routes : {
            'panels_with_panelists' : 'panels_with_panelists',
            'panelists_with_panels' : 'panelists_with_panels',
            'scheduling_conflicts' : 'scheduling_conflicts',
            'tags_by_context' : 'tags_by_context',
            'people_by_tags' : 'people_by_tags'
        },
        
        panels_with_panelists : function() {
            reportRegion.close();
            resultRegion.close();
            reportRegion.show(new ReportView({
                form        : PanelsWithPanelistsForm,
                endPoint    : '/planner_reports/panels_with_panelists',
                colModel    : PanelsWithPanelistsColModel
            }));
        },
        
        panelists_with_panels : function() {
            reportRegion.close();
            resultRegion.close();
            reportRegion.show(new ReportView({
                form        : PanelistsWithPanelsForm,
                endPoint    : '/planner_reports/panelists_with_panels',
                colModel    : PanelistsWithPanelsColModel
            }));
        },
        
        scheduling_conflicts : function() {
            reportRegion.close();
            resultRegion.close();
        },
        
        tags_by_context : function() {
            reportRegion.close();
            resultRegion.close();
            reportRegion.show(new ReportView({
                form        : TagsByContextForm,
                endPoint    : '/planner_reports/admin_tags_by_context',
                colModel    : TagsByContextColModel
            }));
        },
        
        people_by_tags : function() {
            reportRegion.close();
            resultRegion.close();
            reportRegion.show(new ReportView({
                form        : PeopleByTagForm,
                endPoint    : '/planner_reports/people_by_tag',
                colModel    : PeopleByTagColModel
            }));
        }
        
    });
    
    /*
     * 
     */
    return {
        init : function(options) {
            new Workspace();
            Backbone.history.start();
        }
    }
    
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    ReportApp.addInitializer(ReportApp.ReportManagement.init);
    ReportApp.start({
            // selectFn                : CommunicationsApp.Management.selectMailing,
            // readTemplate            : '#mailing-data-template',
            // itemArea                : "#mailing-edit-area"
    });
});

</script>
