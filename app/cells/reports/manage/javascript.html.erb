<script type="text/javascript">

ReportApp = new Backbone.Marionette.Application();

ReportApp.ReportManagement = (function(Backbone){
    
    var GenericForm = Backbone.Form.extend({
    });
    
    var PanelsByRoomColModel = [
                    {name: 'room',      label : '<%= t "room" %>',  jsonmap: "room", width: 50},
                    {name: 'venue',     label : '<%= t "venue" %>', jsonmap: "venue", width: 50},
                    {name: 'day',       label : '<%= t "time" %>',  jsonmap: "day",    width: 30},
                    {name: 'time',      label : '<%= t "time" %>',  jsonmap: "time_slot",    width: 30},
                    {name: 'item',      label : '<%= t "item" %>',  jsonmap: "item" },
                    {name: 'equipment', label : '<%= t "equipment" %>',  jsonmap: "equipment", width: 70, formatter: AppUtils.arrayToString},
    ];
    
    var PanelsByTimeslotColModel = [
                    {name: 'day',       label : '<%= t "time" %>',  jsonmap: "day",    width: 30},
                    {name: 'time',      label : '<%= t "time" %>',  jsonmap: "time_slot",    width: 30},
                    {name: 'room',      label : '<%= t "room" %>',  jsonmap: "room", width: 50},
                    {name: 'venue',     label : '<%= t "venue" %>', jsonmap: "venue", width: 50},
                    {name: 'item',      label : '<%= t "item" %>',  jsonmap: "item" },
                    {name: 'equipment', label : '<%= t "equipment" %>',  jsonmap: "equipment", width: 70, formatter: AppUtils.arrayToString},
    ];

    var PanelsWithPanelistsForm = Backbone.Form.extend({
        schema : {
            modified_since  : { type : 'Date', title : '<%= t "report-selection-modified-since" %>' },
            sort_by : { type : 'Select', title : '<%= t "report-selection-sort-by" %>', options : [{ val: 'time', label: 'Date/Time' }, { val: 'room', label: 'Room' }, { val: 'title', label: 'Title' }] },
            scheduled       : { type : 'Checkbox', title : '<%= t "report-selection-only-scheduled-items" %>'}, // Include scheduled panels only
            // description     : { type : 'Checkbox'}, // Include item descriptions
            format_id       : { type : 'Select', title : '<%= t "report-selection-item-format" %>', title : '<%= t "report-selection-item-format" %>', options : <%= [{'val' => -1, 'label' => 'All'}].concat(Format.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
            fewer_than      : { type : 'Number', title : '<%= t "report-selection-with-fewer-than" %>'},
            more_than       : { type : 'Number', title : '<%= t "report-selection-with-more-than" %>'}
        },
        
        data : {
            sort_by : 'time',
            modified_since : new Date('January 1, 2000')
        }
        
    });
    
    var PanelistsWithPanelsForm = Backbone.Form.extend({
        schema : {
            scheduled   : { type : 'Checkbox', title : '<%= t "report-selection-only-scheduled-items" %>'}, // Include scheduled panelists only
            reserved    : { type : 'Checkbox', title : '<%= t "report-selection-include-reserved-participants" %>'},
            forprint    : { type : 'Checkbox', title : '<%= t "report-selection-only-items-for-print" %>'}
        },
        
        data : {
        }
    });
    
    var TagsByContextForm = Backbone.Form.extend({
        schema : {
            context : { type : 'Select', title : '<%= t "report-selection-for-tag-context" %>', 
                options : <%= TagContext.all(:order => 'name').collect {|s| {'val' => s.name, 'label' => s.name} }.to_json.html_safe %> },
        },
        
        data : {
        }
    });
    
    var PeopleByTagForm = Backbone.Form.extend({
        schema : {
        },
        
        data : {
        }
    });
    
    var PeopleByTagColModel = [
                    {name: 'context', label : '<%= t "tag-context" %>', jsonmap: "context", width: 100},
                    {name: 'tag', label : '<%= t "tag(s)" %>', jsonmap: "tag", width: 100},
                    {name: 'people', label : '<%= t "reports-people" %>', jsonmap: "people", formatter: AppUtils.arrayToStringSingleLine}
    ];
    
    var TagsByContextColModel = [
                    {name: 'Name', label : '<%= t "person" %>', jsonmap: "name", width: 100},
                    {name: 'Tags', label : '<%= t "tags" %>', jsonmap: "tags", width: 300, formatter: AppUtils.arrayToStringSingleLine}
    ];
    
    var PanelistsWithPanelsColModel = [
                    {name: 'Name', label : '<%= t "person" %>', jsonmap: "name", width: 130},
                    {name: 'Status', label : '<%= t "acceptance-status" %>', jsonmap: "acceptance_status", width: 60},
                    {name:'Items', label : '<%= t "items" %>', jsonmap: "items", width: 500, formatter: AppUtils.arrayToString},
    ];
    
    var PanelsWithPanelistsColModel = [ 
                    {name: 'Ref', label : '<%= t "pub-ref" %>', jsonmap: 'pub_reference_number', width: 100},
                    {name:'Title', label : '<%= t "item-title" %>', jsonmap: "title", width: 500},
                    {name:'Venue', label : '<%= t "venue" %>', jsonmap: "venue_name"},
                    {name:'Room', label : '<%= t "room" %>', jsonmap: "room_name"},
                    {name: 'Format', label : '<%= t "report-selection-item-format" %>', jsonmap: 'format'},
                    {name: 'Area(s)', label : '<%= t "area(s)" %>', jsonmap: 'context', formatter: AppUtils.arrayToString},
                    {name: 'item-start-time', label : '<%= t "item-start-time" %>', jsonmap: 'start_time'},
                    {name: 'End Time', label : '<%= t "item-end-time" %>', jsonmap: 'end_time'},
                    {name: 'Min People', label : '<%= t "item-min-participants" %>', jsonmap: 'minimum_people'},
                    {name: 'Max People', label : '<%= t "item-max-participants" %>', jsonmap: 'maximum_people'},
                    {name: 'Equipment', label : '<%= t "equipment" %>', jsonmap: 'equipment',width: 300, formatter: AppUtils.arrayToString},
                    {name: 'Moderator(s)', label : '<%= t "moderator(s)" %>', jsonmap: 'moderators',width: 300, formatter: AppUtils.arrayToString },
                    {name: 'Participants', label : '<%= t "participants" %>', jsonmap: 'participants',width: 300, formatter: AppUtils.arrayToString }, 
                    {name: 'Reserve', label : '<%= t "reserved" %>', jsonmap: 'reserve',width: 300,formatter: AppUtils.arrayToString},
                    {name: 'Invisible', label : '<%= t "invisible" %>', jsonmap: 'invisible',width: 300, formatter: AppUtils.arrayToString},
                ];

    var Workspace = Backbone.Router.extend({

        routes : {
            'panels_with_panelists' : 'panels_with_panelists',
            'panelists_with_panels' : 'panelists_with_panels',
            'scheduling_conflicts' : 'scheduling_conflicts',
            'tags_by_context' : 'tags_by_context',
            'people_by_tags' : 'people_by_tags',
            'panels_by_room'        : 'panels_by_room',
            'panels_by_timeslot'    : 'panels_by_timeslot'
        },
        
        panels_by_room : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : '/planner_reports/panels_by_room',
                colModel    : PanelsByRoomColModel,
                caption     : '<%= t "panels-by-room" %>'
            }));
        },
        
        panels_by_timeslot : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : GenericForm,
                endPoint    : '/planner_reports/panels_by_timeslot',
                colModel    : PanelsByTimeslotColModel,
                caption     : '<%= t "panels-by-timeslot" %>'
            }));
        },
                
        panels_with_panelists : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : PanelsWithPanelistsForm,
                endPoint    : '/planner_reports/panels_with_panelists',
                colModel    : PanelsWithPanelistsColModel,
                caption     : '<%= t "report-items-with-participants" %>'
            }));
        },
        
        panelists_with_panels : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : PanelistsWithPanelsForm,
                endPoint    : '/planner_reports/panelists_with_panels',
                colModel    : PanelistsWithPanelsColModel,
                caption     : '<%= t "report-participants-with-items" %>'
            }));
        },
        
        scheduling_conflicts : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            
            conflictLayout = new AppUtils.ConflictLayout({
                template : "#conflict-layout-template"
            });

            // Render the conflicts for this day
            conflicts = new AppUtils.Conflicts();
            conflicts.fetch({
                url : "/program_planner/getConflicts.json", // TODO - fix domain and sub-site
                success : function(obj) {
                    AppUtils.createConflictCollectionView(obj.get('schedule'), "#schedule-conflict-view-template",conflictLayout.scheduleRegion);
                    AppUtils.createConflictCollectionView(obj.get('room'), "#room-conflict-view-template",conflictLayout.roomRegion);
                    AppUtils.createConflictCollectionView(obj.get('excluded_item'), "#excluded-item-conflict-view-template",conflictLayout.excludedItemRegion);
                    AppUtils.createConflictCollectionView(obj.get('excluded_time'), "#excluded-time-conflict-view-template",conflictLayout.excludedTimeRegion);
                    AppUtils.createConflictCollectionView(obj.get('availability'), "#availability-conflict-view-template",conflictLayout.availabilityRegion);
                    AppUtils.createConflictCollectionView(obj.get('back_to_back'), "#back-to-back-conflict-view-template",conflictLayout.backToBackRegion);
                } 
            });
            ReportBase.resultRegion.show(conflictLayout);
        },
        
        tags_by_context : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : TagsByContextForm,
                endPoint    : '/planner_reports/admin_tags_by_context',
                colModel    : TagsByContextColModel,
                caption     : '<%= t "report-tags-by-context" %>'
            }));
        },
        
        people_by_tags : function() {
            ReportBase.reportRegion.close();
            ReportBase.resultRegion.close();
            ReportBase.reportRegion.show(new ReportBase.ReportView({
                form        : PeopleByTagForm,
                endPoint    : '/planner_reports/people_by_tag',
                colModel    : PeopleByTagColModel,
                caption     : '<%= t "reports-people-by-tag" %>'
            }));
        }
        
    });
    
    /*
     * 
     */
    return {
        init : function(options) {
            new Workspace();
            Backbone.history.start();
        }
    }
    
})(Backbone);

/*
 * 
 */
jQuery(document).ready(function() {
    ReportApp.addInitializer(ReportApp.ReportManagement.init);
    ReportApp.start({});
});

</script>
