<%# TODO - namespace
%>    
<script type="text/javascript">
//<![CDATA[
jQuery(document).ready(function() {
    //Patch for template variables in _underscore top stop class with Rails variables in the file
    _.templateSettings = {
        interpolate : /\{\{\=(.+?)\}\}/g,
        evaluate : /\{\{(.+?)\}\}/g
    };
    
    var eventAggregator = _.extend({}, Backbone.Events); // Event aggregator for the page

    // Model for Names
    Name = Backbone.Model.extend({
        defaults : {
            name : 'name'
        }
    });

    // Individual result from a query
    ResultRow = Backbone.RelationalModel.extend({});
    
    // The collection of query results
    ResultRowCollection = Backbone.Collection.extend({
        model : ResultRow
    });
    
    // Model for results from q survey query
    ResultSet = Backbone.RelationalModel.extend({
        url : '/survey_reports/runReport',
        
        relations : [{
            type : Backbone.HasMany,
            key : 'rowdata',
            relatedModel : 'ResultRow',
            collectionType : 'ResultRowCollection',
        }],

    });
    
    SurveyNameCollection = Backbone.Collection.extend({
        model : Name,
        url : '/survey_reports/surveyNames'
    });

    QuestionsCollection = Backbone.Collection.extend({
        model : Name,
        url : '/survey_reports/questions'
    });
    
    QueryCollection = Backbone.Collection.extend({
        model : Name,
        url : '/survey_reports/surveyQueryNames' // URL to get the names of the surveys
    });
    
    //
    //
    //
    SurveyQuery = Backbone.RelationalModel.extend({
        defaults : {
            name : '', // The name of the query
            operation : 'ALL', // can be ALL or ANY
            shared : false
        },

        // Collection predicates
        relations : [{
            type : Backbone.HasMany,
            key : 'survey_query_predicates',
            relatedModel : 'QueryPredicate',
            collectionType : 'PredicateCollection', // 
            reverseRelation : {
                key : 'survey_query_id',
            }
        }],

        urlRoot: '/survey_query', // URL for the save or update of a survey query i.e URL for the controller using REST based semantics
    });


    //
    // The predicate for the query
    //
    QueryPredicate = Backbone.RelationalModel.extend({
        defaults : {
            survey_question_id : 0, // The id of the question from the database
            operation : '=', // The operation: =, <>, contains
            value : '' // The value that we are searching for
        },
        
        sync : function() {
            // do nowt, i.e. we do not want to communicate individual change to the server. Done in bulk in Survey Query
        },
        
    });

    PredicateCollection = Backbone.Collection.extend({
    });
    
    //
    //
    //
    ResultsView = Backbone.View.extend({
        el : '#query-results',

        tagName : 'div',

        template : _.template($('#query-results-template').html()),

        render : function() {
            var colModel = [ 
                    {name:'First Name', jsonmap: "first_name", sortable:true, width: 20}, 
                    {name:'Last Name', jsonmap: "last_name", sortable:true, width: 30}, 
                    {name:'Email', jsonmap: "email", sortable:true, width: 35}, 
                ];
                
            for (var key in this.resultsCollection.get('userdata')) {
                // alert(key + ' => ' + this.resultsCollection.get('userdata')[key]['question']);
                colModel.push( {name: this.resultsCollection.get('userdata')[key]['question'], jsonmap: key, cellattr: function (rowId, tv, rawObject, cm, rdata) { return 'style="white-space: pre-wrap;"' } } );
            };

            this.$el.html(this.template());
            
            this.grid = $('.result-table').jqGrid({
                colModel : colModel,
                datatype: 'jsonstring',
                datastr: this.resultsCollection.toJSON(),
                jsonReader :{
                    repeatitems : false,
                    page: "currpage",
                    records: "totalrecords",
                    root : "rowdata",
                    total: "totalpages",
                    id : "id",
                    // userdata : "userdata"
                },
                viewrecords: true,
                height: "auto",
                autowidth: true,
                ignoreCase: true,
                gridview: true,
                // rowList: [10, 20, 500],
                // gridview: true,
                // autowidth: true,
                // viewrecords: true,
                pager : '#result-pager',
                caption: 'Results'
            });
            // this.grid.jqGrid('navGrid','#result-pager',{edit:false,add:false,del:false,search:false});
            
            return this;
        },

        initialize : function() {
        },
    });

    //
    PredicateView = Backbone.View.extend({
        tagName : 'li',

        template : _.template($('#predicate-template').html()),

        events : {
            'click .answerId' : 'selectAnswer',
            'click .questionID' : 'selectQuestion',
            'click .operator' : 'selectOperator',
            'blur .query-text' : 'selectText',
            'click .remove-button' : 'removePredicate',
        },

        initialize : function() {
            this.listenTo(this.model, 'change', this.render);
            this.listenTo(this.model, 'destroy', this.delPredicate);
            
            _.bindAll(this, "cleanup");
            this.options.evAggregator.bind("cleanup", this.cleanup);
        },

        render : function() {
            if (this.model) {
                if (this.model.has('survey_question_id')) {
                    //alert(this.options.questionsCollection);
                    this.$el.html(this.template(_.extend({
                        col : this.options.col
                    }, this.model.toJSON())));
                }
            } else {
                this.$el.html("");
            };
            return this;
        },
        
        selectQuestion : function(ev) {
            var oid = parseInt($(ev.currentTarget).val());
            // var result = _.find(questionsCollection.models, function(obj) { return obj.id == oid });
            var result = _.find(this.options.col.models, function(obj) { return obj.id == oid });
            this.model.set("survey_question_id", oid);
        },

        selectAnswer : function(ev) {
            this.model.set("value", $(ev.currentTarget).val());
        },

        selectOperator : function(ev) {
            this.model.set("operation", $(ev.currentTarget).val());
        },

        selectText : function(ev) {
            this.model.set("value", $(ev.currentTarget).val());
        },

        delPredicate : function(ev) {
            //this.$el.html(""); // update the view
            this.remove();
        },

        removePredicate : function(ev) {
            this.model.destroy(); // remove from the model
        },
        
        cleanup : function() {
          this.remove();
        },
    }); 

    QueryView = Backbone.View.extend({
        tagName : 'div',

        selected : 0,

        template : _.template($('#query-template').html()),

        renderPredicates : function() {
            if (this.model) {
                var col = this.model.get('survey_query_predicates');
                // alert(col);
                // Need to go through the predicates abd render those
                _.each(col.models, function(v) {
                    this.addPredicate(v);
                }, this);
            };
        },

        render : function() {
            this.$el.html(this.template(this.model.toJSON()));
            
            //alert(this.options.questionsCollection);
            
            // if there are predicates then we want to render them
            this.renderPredicates();
            
            return this;
        },
        
        remove : function() {
            
            // this.unbind();
            // this.model.unbind( 'change', this.render, this );

            // remove the view from the DOM
            Backbone.View.prototype.remove.apply(this);
            if (this.options.evAggregator) {
                // And do the same for the predicates...
                this.options.evAggregator.trigger("cleanup", this.model);
            };
            // delete this.$el;
            // delete this.el;
        },

        initialize : function() {
            this.model.on('remove:survey_query_predicates', this.removePredicate, this);
            this.model.on('add:survey_query_predicates', this.addPredicate, this);
        },
        
        removePredicate : function(removed, related) {
            if (! removed.get('id')) { // If the id does not exist in the backend
               removed.destroy();
            }
        },

        events : {
            "click .add-button" : "addOne",
            "click .run-button" : "run",
            'click #match' : 'selectMatch',
            "click .save-button" : "save",
            "click .query-shared" : "queryShared",
            'blur .query-name' : 'selectText',
        },
        
        queryShared : function(ev) {
          this.model.set('shared', !this.model.set('shared') );
        },
        
        selectText : function(ev) {
            if (this.model) {
                this.model.set('name', $(ev.currentTarget).val());
            };
        },

        save : function(ev) {
            // alert('TBD');
            this.model.save(null, { wait: true });
            // TODO - on save we need to send an event so that the "menus" are updated
            if (this.options.evAggregator) {
                this.options.evAggregator.trigger("refreshQueryLists");
            };
        },

        selectMatch : function(ev) {
            this.model.set('operation', $(ev.currentTarget).val());
        },

        run : function() {
            resultSet = new ResultSet();
            resultSet.fetch({
                type : 'POST',
                data : 'query=' + JSON.stringify(this.model.toJSON()),
                error : function(model, response) {
                  alert("ERROR: unable to get the result from the server");  
                },
                success : function(model) {
                    if (this.resultView) {
                        this.resultView.resultsCollection = model;
                    } else {
                        this.resultView = new ResultsView({});
                        this.resultView.resultsCollection = model;
                    }
                    this.resultView.render();
                }
            })
        },
        
        addPredicate : function(qp) {
          var view = new PredicateView({
              model : qp,
              col : this.options.questionsCollection,
              evAggregator : this.options.evAggregator
          });
          $('#query-list').append(view.render().el);
          //view.listenTo(this, 'remove', view.cleanup);
        },
        
        addOne : function() {
            // create a new predicate add it to the collection and put it in the view
            var qp = new QueryPredicate();
            qp.set({
                'survey_query_id' : this.model
            });
        },
    }); 


    NewQueryView = Backbone.View.extend({
        tagName : 'div',
        className : 'new-query-dialog',
        id : 'new-query-dialog',

        selected : 0,

        template : _.template($('#new-query-template').html()),

        render : function() {
            var obj = this.$el.html(this.template({
                col : surveyNameCollection,
                selected : this.selected
            }));
            this.dialog = obj.dialog({
                title : 'Create Query',
                modal : true,
                // width: 600,
            });
        },

        events : {
            'click #surveyID' : 'setSelected',
            'click #create-button' : 'createQuery',
            'click #close-button' : 'close',
        },

        setSelected : function(ev) {
            // get the questions for the given survey
            this.selected = $(ev.currentTarget).val();
        },

        createQuery : function(ev) {
            // alert(this.selected);
            this.dialog.dialog('close');

            // instantiate the list of questions
            questionsCollection = new QuestionsCollection();
            questionsCollection.url = "/survey_reports/questions?survey=" + this.selected;
            questionsCollection.fetch({
                data : { surveyid : this.selected },
                success : function(qc,r,opt) {
                    // and pass that to the next view
                    if (currentQueryView) {
                        currentQueryView.remove(); // TODO - also need to reset the predicate list...
                    };
                    
                    var currentQuery = new SurveyQuery({ survey_id : opt.data.surveyid });
                    currentQueryView = new QueryView({
                        questionsCollection : qc,
                        model : currentQuery,
                        evAggregator : eventAggregator
                    });

                    $('#queryapp').append(currentQueryView.render().el);

                }
            });
        },

        close : function(ev) {
            this.dialog.dialog('close');
        },

        initialize : function() {
            this.render();
        },
    });
    
    QueryListView = Backbone.View.extend({
        tagName : 'li',

        template : _.template($('#query-button-template').html()),
        
        initialize : function() {
            // this.listenTo(this.model, 'destroy', this.del);
        },
        
        // del : function() {
            // alert('del');
        // },
        
        events : {
            'click .get-query' : 'getQuery',
            'click .delete-query' : 'removeQuery',
        },
        
        removeQuery : function(ev) {
            // alert('remove query');
            this.model.destroy(); // TODO - need to send event to the server
            this.remove();
            return false;
        },

        getQuery : function(ev) {
            $('.get-query').removeClass('ui-selected');
            $(ev.currentTarget).addClass('ui-selected');

            var cq = SurveyQuery.findOrCreate({ id : this.model.get('id')});
            cq.fetch({ // TODO - if model already in memory then it does not populate the predicates
                success : function(mdl, resp, options) {
                    // and pass that to the next view
                    if (currentQueryView) {
                        currentQueryView.remove();
                    };

                    var currentQuestion = mdl;
                    var questionsCollection = new QuestionsCollection();
                    questionsCollection.url = "/survey_reports/questions?survey=" + mdl.get('survey_id');
                    questionsCollection.fetch({
                        data : mdl.get('survey_id'),
                        mdl : mdl,
                        success : function(qc,r,opt) {
                            currentQueryView = new QueryView({
                                questionsCollection : qc,
                                model : opt.mdl,
                                evAggregator : eventAggregator
                            });

                            $('#queryapp').append(currentQueryView.render().el);
                        }
                    });
                }
            });
            
        },
        
        render : function() {
            this.$el.addClass('ui-widget-content');
            this.$el.html(this.template(this.model.toJSON())); //
            
            return this;
        },
    });
    
    MyQueriesView = Backbone.View.extend({
        el : 'my-queries-view',
        
        template : _.template($('#my-queries-template').html()),
        
        render : function() {
            // Go through the model and create the query buttons
            _.each(this.model.models, function(el, idx, list) { 
                    var view = new QueryListView({
                        model : el,
                    });
                    $('#my-queries').append(view.render().el);
                } );
        },
        
        initialize : function() {
            this.render();
            this.listenTo(this.model, 'add', this.add);
        },
        
        add : function(obj) {
                    var view = new QueryListView({
                        model : obj,
                    });
                    $('#my-queries').append(view.render().el);
        },
                
    });

    AppView = Backbone.View.extend({
        el : '#query-ctl',

        template : _.template($('#query-ctl-template').html()),

        render : function() {
            this.$el.html(this.template);
            return this;
        },

        events : {
            "click .new-query" : "newQuery"
        },

        newQuery : function() {
            surveyNameCollection = new SurveyNameCollection();
            surveyNameCollection.fetch({
                success : function(model) {
                    if (this.nq) {
                        this.nq.surveyNameCollection = model;
                        this.nq.render();
                    } else {
                        this.nq = new NewQueryView({
                            surveyNameCollection : model
                        });
                    }
                }
            });
        },

        initialize : function() {
            this.render();
            this.populateMyQueries();
            
            this.options.evAggregator.bind("refreshQueryLists", this.refresh, this);
        },
        
        refresh : function() {
            // alert('REFRESH');
            // Remove the old list - TODO
            // if (this.queryColl) {
                // this.queryColl.reset();
            // };
            // Get the list from the server
            this.populateMyQueries();
        },
        
        populateMyQueries : function() {
          // Get my queries from the backend
          if (!this.queryColl) {
              this.queryColl = new QueryCollection();
          };
          // and then create the views...  
          this.queryColl.fetch({
              success : function(model) {
                  if (!this.myQueries) {
                      this.myQueries = new MyQueriesView({ 
                          model : model,
                          evAggregator : eventAggregator
                          });
                  } // else use the add event to myQueries
              }
          });
        },
    });

    //
    // Routes
    //
    AppRouter = Backbone.Router.extend({
        routes : {
        },
    });

    //
    //
    //
    var app = new AppView({evAggregator : eventAggregator});
    
    var currentQueryView = null;

    var app_router = new AppRouter();

    Backbone.history.start();
}); 
//]]>
</script>
