<%# TODO - namespace
%>    
<script type="text/javascript">
//<![CDATA[
jQuery(document).ready(function() {
    //Patch for template variables in _underscore top stop class with Rails variables in the file
    _.templateSettings = {
        interpolate : /\{\{\=(.+?)\}\}/g,
        evaluate : /\{\{(.+?)\}\}/g
    };


    //
    // Model for Query
    //
    SurveyName = Backbone.Model.extend({
        defaults : {
            name : 'name',
        },
    });

    Question = Backbone.Model.extend({
        defaults : {
            question : 'name',
        },
    }); 



    ResultRow = Backbone.RelationalModel.extend({});
    
    // ResultMetaDataRow = Backbone.RelationalModel.extend({});

    ResultRowCollection = Backbone.Collection.extend({
        model : ResultRow
    });
    
    ResultSet = Backbone.RelationalModel.extend({
        url : '/survey_reports/runReport',
        
        relations : [{
            type : Backbone.HasMany,
            key : 'rowdata',
            relatedModel : 'ResultRow',
            collectionType : 'ResultRowCollection',
        }],

    });
    
    
    SurveyNameCollection = Backbone.Collection.extend({
        model : SurveyName,
        url : '/survey_reports/surveyNames'
    });

    QuestionsCollection = Backbone.Collection.extend({
        model : Question,
        url : '/survey_reports/questions'
    });

    //
    //
    //
    SurveyQuery = Backbone.RelationalModel.extend({
        defaults : {
            name : '', // The name of the query
            operation : 'ALL' // can be ALL or ANY
        },

        // Collection predicates
        relations : [{
            type : Backbone.HasMany,
            key : 'survey_query_predicates',
            relatedModel : 'QueryPredicate',
            //includeInJSON: Backbone.Model.prototype.idAttribute,
            collectionType : 'PredicateCollection', // ?????
            reverseRelation : {
                key : 'survey_query_id',
            }
        }],

        urlRoot: '/survey_query', // URL for the save or update of a survey query i.e URL for the controller using REST based semantics
    });


    //
    // The predicate for the query
    //
    QueryPredicate = Backbone.RelationalModel.extend({
        defaults : {
            survey_question_id : 0, // The id of the question from the database
            operation : '=', // The operation: =, <>, contains
            value : '' // The value that we are searching for
        },
        
        sync : function() {
            // do nowt, i.e. we do not want to comminicate individual change to the server. Done in bulk in Survey Query
        },
        
        urlRoot: 'survey_query_predicate'
    });

    PredicateCollection = Backbone.Collection.extend({
    });
    // TODO - add URL method to create a URL for the whole collection

    
    //
    //
    //
    ResultsView = Backbone.View.extend({
        el : '#query-results',

        tagName : 'div',

        template : _.template($('#query-results-template').html()),

        render : function() {
            // TODO - determine the col model from the array : this.resultsCollection
            // this.query
            // q1, q2 etc.
            // alert(JSON.stringify(this.resultsCollection.get('userdata').toJSON()));
            
            //talpages":1,"currpage":1,"totalrecords":2,"userdata":
            var colModel = [ 
                    {name:'First Name', jsonmap: "first_name", sortable:true, width: 30}, 
                    {name:'Last Name', jsonmap: "last_name", sortable:true, width: 30}, 
                ];
                
            for (var key in this.resultsCollection.get('userdata')) {
                // alert(key + ' => ' + this.resultsCollection.get('userdata')[key]['question']);
                colModel.push( {name: this.resultsCollection.get('userdata')[key]['question'], jsonmap: key, cellattr: function (rowId, tv, rawObject, cm, rdata) { return 'style="white-space: pre-wrap;"' } } );
            };

            this.$el.html(this.template());
            
            this.grid = $('.result-table').jqGrid({
                colModel : colModel,
                datatype: 'jsonstring',
                datastr: this.resultsCollection.toJSON(),
                jsonReader :{
                    repeatitems : false,
                    page: "currpage",
                    records: "totalrecords",
                    root : "rowdata",
                    total: "totalpages",
                    id : "id",
                    // userdata : "userdata"
                },
                viewrecords: true,
                height: "auto",
                autowidth: true,
                ignoreCase: true,
                gridview: true,
                // rowList: [10, 20, 500],
                // gridview: true,
                // autowidth: true,
                // viewrecords: true,
                pager : '#result-pager',
                caption: 'Results'
            });
            // this.grid.jqGrid('navGrid','#result-pager',{edit:false,add:false,del:false,search:false});
            
            return this;
        },

        initialize : function() {
        },
    });

    //
    PredicateView = Backbone.View.extend({
        tagName : 'li',

        template : _.template($('#predicate-template').html()),

        events : {
            'click .answerId' : 'selectAnswer',
            'click .questionID' : 'selectQuestion',
            'click .operator' : 'selectOperator',
            'blur .query-text' : 'selectText',
            'click .remove-button' : 'removePredicate',
        },

        initialize : function() {
            this.listenTo(this.model, 'change', this.render);
            this.listenTo(this.model, 'destroy', this.delPredicate);
        },

        render : function() {
            if (this.model) {
                if (this.model.has('survey_question_id')) {
                    this.$el.html(this.template(_.extend({
                        col : questionsCollection
                    }, this.model.toJSON())));
                }
            } else {
                this.$el.html("");
            };
            return this;
        },
        
        selectQuestion : function(ev) {
            var oid = parseInt($(ev.currentTarget).val());
            var result = _.find(questionsCollection.models, function(obj) { return obj.id == oid });
            this.model.set("survey_question_id", oid);
        },

        selectAnswer : function(ev) {
            this.model.set("value", $(ev.currentTarget).val());
        },

        selectOperator : function(ev) {
            this.model.set("operation", $(ev.currentTarget).val());
        },

        selectText : function(ev) {
            this.model.set("value", $(ev.currentTarget).val());
        },

        delPredicate : function(ev) {
            //this.$el.html(""); // update the view
            this.remove();
        },

        removePredicate : function(ev) {
            this.model.destroy(); // remove from the model
        },
    }); 

    QueryView = Backbone.View.extend({
        tagName : 'div',
        // el : '#queryapp',

        selected : 0,

        template : _.template($('#query-template').html()),

        reset : function() {
            if (this.model) {
                //this.model.get('survey_query_predicates').reset();
                var col = this.model.get('survey_query_predicates');
                var toClear = [];
                while ( (c = col.models.pop()) ) { //{ silent : true }
                    toClear.push(c);
                    //c.clear();  //{ silent : true }
                };
                _.each(toClear, function(el) { el.clear(); } );
                this.model = null;
            };
            if (this.questionsCollection) {
                this.questionsCollection = null;
            };
            
            //this.$el.html(""); // update the view
            this.remove();
        },
        
        render : function() {
            // alert("render qv");
            // this.$el.append(this.template(this.model.toJSON()));
            
            this.$el.html(this.template(this.model.toJSON()));
            
            return this;
        },

        initialize : function() {
            this.model.on('remove:survey_query_predicates', this.removePredicate, this);
            this.model.on('add:survey_query_predicates', this.addPredicate, this);
            this.model.on('reset', this.reset, this);
            
            this.model.on('change', this.render, this); // or 'change' ????
        },
        
        removePredicate : function(removed, related) {
            if (! removed.get('id')) { // If the id does not exist in the backend
               removed.destroy();
            }
        },

        events : {
            "click .add-button" : "addOne",
            "click .run-button" : "run",
            'click #match' : 'selectMatch',
            "click .save-button" : "save",
            'blur .query-name' : 'selectText',
        },
        
        selectText : function(ev) {
            if (this.model) {
                this.model.set('name', $(ev.currentTarget).val());
            };
        },

        save : function(ev) {
            alert('TBD');
            // this.model.save(null,{ wait: true });
        },

        selectMatch : function(ev) {
            this.model.set('operation', $(ev.currentTarget).val());
        },

        run : function() {
            resultSet = new ResultSet();
            resultSet.fetch({
                type : 'POST',
                data : 'query=' + JSON.stringify(this.model.toJSON()),
                error : function(model, response) {
                  alert("ERROR: unable to get the result from the server");  
                },
                success : function(model) {
                    if (this.resultView) {
                        this.resultView.resultsCollection = model;
                    } else {
                        this.resultView = new ResultsView({});
                        this.resultView.resultsCollection = model;
                    }
                    this.resultView.render();
                }
            })
        },
        
        addPredicate : function(qp) {
          var view = new PredicateView({
              model : qp,
              col : questionsCollection
          });
          $('#query-list').append(view.render().el);
        },
        
        addOne : function() {
            // create a new predicate add it to the collection and put it in the view
            var qp = new QueryPredicate();
            qp.set({
                'survey_query_id' : this.model
            });
        },
    }); 


    NewQueryView = Backbone.View.extend({
        tagName : 'div',
        className : 'new-query-dialog',
        id : 'new-query-dialog',

        selected : 0,

        template : _.template($('#new-query-template').html()),

        render : function() {
            var obj = this.$el.html(this.template({
                col : surveyNameCollection,
                selected : this.selected
            }));
            this.dialog = obj.dialog({
                title : 'Create Query',
                modal : true,
                // width: 600,
            });
        },

        events : {
            'click #surveyID' : 'setSelected',
            'click #create-button' : 'createQuery',
            'click #close-button' : 'close',
        },

        setSelected : function(ev) {
            // get the questions for the given survey
            this.selected = $(ev.currentTarget).val();
        },

        createQuery : function(ev) {
            // alert(this.selected);
            this.dialog.dialog('close');

            // instantiate the list of questions
            questionsCollection = new QuestionsCollection();
            questionsCollection.url = "/survey_reports/questions?survey=" + this.selected;
            questionsCollection.fetch({
                success : function(model) {
                    // and pass that to the next view
                    if (this.qv) {
                        this.qv.reset();
                    };
                    
                    var currentQuery = new SurveyQuery;
                    this.qv = new QueryView({
                        questionsCollection : model,
                        model : currentQuery
                    });

                    $('#queryapp').append(this.qv.render().el);

                }
            });
        },

        close : function(ev) {
            this.dialog.dialog('close');
        },

        initialize : function() {
            this.render();
        },
    });

    AppView = Backbone.View.extend({
        el : '#query-ctl',

        template : _.template($('#query-ctl-template').html()),

        render : function() {
            this.$el.html(this.template);
            return this;
        },

        events : {
            "click .new-query" : "newQuery"
        },

        newQuery : function() {
            surveyNameCollection = new SurveyNameCollection();
            surveyNameCollection.fetch({
                success : function(model) {
                    if (this.nq) {
                        this.nq.surveyNameCollection = model;
                        this.nq.render();
                    } else {
                        this.nq = new NewQueryView({
                            surveyNameCollection : model
                        });
                    }
                }
            });
        },

        initialize : function() {
            this.render();
        },
    });

    //
    // Routes
    //
    AppRouter = Backbone.Router.extend({
        routes : {
        },
    });

    //
    //
    //
    var app = new AppView();

    var app_router = new AppRouter();

    Backbone.history.start();
}); 
//]]>
</script>
