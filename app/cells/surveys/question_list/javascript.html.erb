<script type="text/javascript">

SurveyQuestionApp = new Backbone.Marionette.Application();

SurveyQuestionApp.SurveyQuestionManagement = (function(Backbone){
    
    Backbone.Form.editors.List.Modal.ModalAdapter = Backbone.BootstrapModal;

    SurveyQuestion = Backbone.DeepModel.extend({
        schema : {
            question            : { type : 'Html', title : '<%= t "question" %>' },
            title               : { type : 'Text', title : '<%= t "title" %>' },
            sort_order          : { type : 'Number', title : '<%= t "sort_order" %>' },
            tags_label          : { type : 'Text', title : '<%= t "tags_label" %>',
                                    validators : [ /^[A-z0-9_]*$/ ] },
            question_type       : { type : 'Select', title : '<%= t "question_type" %>',
                                    options : <%= [:textbox, :singlechoice, :multiplechoice, :selectionbox, :availability, :address, :phone].to_json.html_safe %>
                                    },
            mandatory           : { type : 'Checkbox', title : '<%= t "mandatory" %>' },
            isbio               : { type : 'DependentCheckbox', title : '<%= t "isbio" %>',
                                     dependsOn : 'question_type', dependentValues : ['textbox']  }, // only if the question type is text
            'survey_format.help' : { type :'Text', title : '<%= t "Help Text" %>' }, // Just need the help text...
            // nested answers object - only if the type is appropriate
            answers             : { type : 'DependentList',
                dependsOn : 'question_type', dependentValues : ['multiplechoice', 'singlechoice', 'selectionbox'],
                itemType : 'Object',
                subSchema : {
                    answer : { type : 'Text' },
                    // default ?
                    answertype_id : { type : 'Select', 
                                       title : '<%= t "answer type" %>',
                                       options : <%= [[' ',' ']].concat(AnswerType.find(:all).collect {|s| {'val' => s.id, 'label' => s.name} }).to_json.html_safe %> },
                    start_day : { type : 'DependentSelect', title : '<%= t "start day" %>', options : <%=  ([[' ','-1']].concat((0..((SITE_CONFIG[:conference][:number_of_days]).to_i-1)).to_a.collect{ |r| [(Time.zone.parse(SITE_CONFIG[:conference][:start_date]) + r.days).strftime('%A'), r]})).collect {|i,l| {'val' => l, 'label' => i}}.to_json.html_safe%>,
                     dependsOn : 'answertype_id', dependentValues : ['<%= AnswerType["TimeConflict"].id %>'] },
                    start_time : { type : 'DependentTime', title : '<%= t "start time" %>',
                     dependsOn : 'answertype_id', dependentValues : ['<%= AnswerType["TimeConflict"].id %>'] },
                    duration : { type : 'DependentNumber', title : '<%= t "duration (minutes)" %>',
                     dependsOn : 'answertype_id', dependentValues : ['<%= AnswerType["TimeConflict"].id %>'] }
                },
            } 
            // TODO - Need to indicate if a conflict, and info about the conflict.... DO we need default???
        },
    });
    
    SurveyQuestionCollection = Backbone.Collection.extend({
        model : SurveyQuestion
    });
    
    SurveyQuestionLayout = Backbone.Marionette.Layout.extend({
        template: "#survey-question-list-layout-template",
        
        regions : {
            surveyQuestionControlRegion: "#survey-question-control-div",
            surveyQuestionRegion: "#survey-question-region-div",
        },
    });
    
    var tabLists = [];
    
    function clearDetails() {
        _.invoke(tabLists, 'reset' ); //????
    };

    function showQuestions(sid, gid) {
        surveyQuestionLayout = new SurveyQuestionLayout();
        surveyQuestionLayout.render();
        $('#survey-question-region-view').html(surveyQuestionLayout.el);
        
        TabUtils.createTabControl({
            template : "#survey-question-control-template",
            modelType : SurveyQuestion, // TODO - fix URL
            view_refresh_event : "survey-question:refresh",
            modal_create_title : '<%= t "Create Question" %>',
            region : surveyQuestionLayout.surveyQuestionControlRegion,
            // id : id,
            // id_name : 'survey_id',
            modelURL : "/surveys/" + sid + "/survey_groups/" + gid + "/survey_questions" // TODO - check
        });
        
        // /surveys/2/survey_groups/2/survey_questions.json
        tabLists.push( AppUtils.createCollectionView({
            url                     : "/surveys/" + sid + "/survey_groups/" + gid + "/survey_questions.json",
            modelURL                : "/surveys/" + sid + "/survey_groups/" + gid + "/survey_questions",
            collectionType          : SurveyQuestionCollection,
            region                  : surveyQuestionLayout.surveyQuestionRegion,
            template                : "#survey-question-template",
            collection_attributes   : { "class" : "table table-striped table-condensed" },
            collection_tagName      : 'table',
            tagName                 : 'tr',
            view_refresh_event      : "survey-question:refresh",
            selectFn                : selectQuestion,
            readTemplate            : '#question-data-template',
            itemArea                : "#survey-edit-area" // TODO - we will also want the item template???
        }) );
    };
    
    function selectQuestion(id) {
        <%= @selectNotifyMethod %>(id);
    };
    
    return {
        init : function() {
        },
        
        showQuestions : function(sid, gid) { // TODO - need the group and survey id's
            showQuestions(sid, gid);
        },
        
        clearDetails : function() {
            clearDetails();
        },
        
        selectQuestion : function(id) {
            selectQuestion(id);
        },
    }

})(Backbone);

jQuery(document).ready(function() {
    SurveyQuestionApp.start();
    SurveyQuestionApp.SurveyQuestionManagement.init();
});

</script>
