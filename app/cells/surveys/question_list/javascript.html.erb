<script type="text/javascript">

SurveyQuestionApp = new Backbone.Marionette.Application();

SurveyQuestionApp.SurveyQuestionManagement = (function(Backbone){

    SurveyQuestion = Backbone.Model.extend({
        schema : {
            question            : { type : 'Text', title : '<%= t "question" %>' },
            title            : { type : 'Text', title : '<%= t "title" %>' },
            sort_order            : { type : 'Number', title : '<%= t "sort_order" %>' },
            tags_label            : { type : 'Text', title : '<%= t "tags_label" %>' },
            // isbio            : { type : 'Boolean', title : '<%= t "isbio" %>' },
            // mandatory            : { type : 'Boolean', title : '<%= t "mandatory" %>' },
            question_type            : { type : 'Text', title : '<%= t "question_type" %>' },
            answer_type            : { type : 'Text', title : '<%= t "answer_type" %>' },
            // TODO - nested format object
            // TODO - nested answers object
        },
    });
    
    SurveyQuestionCollection = Backbone.Collection.extend({
        model : SurveyQuestion
    });
    
    SurveyQuestionLayout = Backbone.Marionette.Layout.extend({
        template: "#survey-question-list-layout-template",
        
        regions : {
            surveyQuestionControlRegion: "#survey-question-control-div",
            surveyQuestionRegion: "#survey-question-region-div",
        },
    });
    
    var tabLists = [];
    
    function clearDetails() {
        _.invoke(tabLists, 'reset' ); //????
    };

    function showQuestions(sid, gid) {
        surveyQuestionLayout = new SurveyQuestionLayout();
        surveyQuestionLayout.render();
        $('#survey-question-region-view').html(surveyQuestionLayout.el);
        
        TabUtils.createTabControl({
            template : "#survey-question-control-template",
            modelType : SurveyQuestion, // TODO - fix URL
            view_refresh_event : "survey-question:refresh",
            modal_create_title : '<%= t "Create Question" %>',
            region : surveyQuestionLayout.surveyQuestionControlRegion,
            // id : id,
            // id_name : 'survey_id',
            modelURL : "/surveys/" + sid + "/survey_groups/" + gid + "/survey_questions" // TODO - check
        });
        
        // /surveys/2/survey_groups/2/survey_questions.json
        tabLists.push( AppUtils.createCollectionView({
            url                     : "/surveys/" + sid + "/survey_groups/" + gid + "/survey_questions.json",
            modelURL                : "/surveys/" + sid + "/survey_groups/" + gid + "/survey_questions",
            collectionType          : SurveyQuestionCollection,
            region                  : surveyQuestionLayout.surveyQuestionRegion,
            template                : "#survey-question-template",
            collection_attributes   : { "class" : "table table-striped table-condensed" },
            collection_tagName      : 'table',
            tagName                 : 'tr',
            view_refresh_event      : "survey-question:refresh",
            selectFn                : selectQuestion,
            readTemplate            : '#question-data-template',
            itemArea                : "#survey-edit-area" // TODO - we will also want the item template???
        }) );
    };
    
    function selectQuestion(id) {
        <%= @selectNotifyMethod %>(id);
    };
    
    return {
        init : function() {
        },
        
        showQuestions : function(sid, gid) { // TODO - need the group and survey id's
            showQuestions(sid, gid);
        },
        
        clearDetails : function() {
            clearDetails();
        },
        
        selectQuestion : function(id) {
            selectQuestion(id);
        },
    }

})(Backbone);

jQuery(document).ready(function() {
    SurveyQuestionApp.start();
    SurveyQuestionApp.SurveyQuestionManagement.init();
});

</script>
